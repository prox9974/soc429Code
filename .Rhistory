gridExtra::grid.arrange(p1$g, p2$g, p3$g, nrow = 3)
p1 <- mycisVar(N = 10, R = 10)
clearAll()
#source("Y:/SOC 429-YOCOM/CLASS CODE/loadPackages.R")
#source("Y:/SOC 429-YOCOM/CLASS CODE/SOC429_CODE.R")
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(tidy = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(comment = "")
#theme_set(theme_minimal())
library(ggplot2)
g <- myx(N = 25)
#source("Y:/SOC 429-YOCOM/CLASS CODE/loadPackages.R")
#source("Y:/SOC 429-YOCOM/CLASS CODE/SOC429_CODE.R")
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(tidy = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(comment = "")
#theme_set(theme_minimal())
library(ggplot2)
library(soc429Code)
g <- myx(N = 25)
g$g.pop + annotate(geom = "label", x = 105, y = 0.1, label = "Mother", fill = "white")
myx(N = 15, seed = 23456)$g.sample + annotate(geom = "label", x = 105, y = 0.2, label = "Daughter 1", fill = "white")
myx(N = 15, seed = 34567)$g.sample + annotate(geom = "label", x = 105, y = 0.2, label = "Daughter 2", fill = "white")
myx(N = 15, seed = 45678)$g.sample + annotate(geom = "label", x = 105, y = 0.2, label = "Daughter 3", fill = "white")
myx(N = 15, seed = 12345)$g.sampdist
plot(density(rnorm(100000)), xlim = c(-5, 5) , main = "Normal Distribution, with m = 0, sd = 1", col = "red")
plot(density(rt(100000, df = 5)), xlim = c(-5, 5), main = "T-Distribution with 5 df", col = "red")
plot(density(rchisq(100000,df = 5)), main = "Chi-Square Dist with 5 df", col = "red")
g <- myx(N = 10, biased = TRUE)
g$g.pop
g$g.sampdist
myx(biased = FALSE, re = TRUE)$g.sampdist + ggtitle("Relatively Efficient (N = 10)")
myx(biased = FALSE, re = FALSE)$g.sampdist + ggtitle("Relatively Inefficient (N = 10)")
g <- myx(N = 100, biased = FALSE)
g$g.pop
myx(N = 5, biased = TRUE)$g.sampdist + ggtitle("Cindy: Narrower, but biased so not consistent", "Small N")
myx(N = 100, biased = TRUE)$g.sampdist + ggtitle("Cindy: Narrower, but biased so not consistent", "Large N")
myx(N = 5, biased = FALSE)$g.sampdist + ggtitle("Jan: Narrower, but biased so not consistent", "Small N")
myx(N = 100, biased = FALSE, ic = TRUE)$g.sampdist + ggtitle("Jan: Correct, but fatter, not skinner!", "Large N")
myx(N = 5, biased = TRUE)$g.sampdist + ggtitle("Marsha: Consistent", "Small N")
myx(N = 100, biased = FALSE, ic = FALSE)$g.sampdist + ggtitle("Marsha: Consistent, Large N")
p1 <- mycisMean(N = 10, R = 10)
??mycisMean
p1 <- soc429Code::mycisMean(N = 10, R = 10)
install.packages("soc429Code")
devtools::install_github("prox9974/soc429Code")
install.packages(c("backports", "fs", "glue", "httpuv", "openxlsx", "raster", "testthat"))
library(soc429Code)
#source("Y:/SOC 429-YOCOM/CLASS CODE/loadPackages.R")
#source("Y:/SOC 429-YOCOM/CLASS CODE/SOC429_CODE.R")
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(tidy = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(comment = "")
#theme_set(theme_minimal())
library(ggplot2)
library(soc429Code)
g <- myx(N = 25)
g$g.pop + annotate(geom = "label", x = 105, y = 0.1, label = "Mother", fill = "white")
myx(N = 15, seed = 23456)$g.sample + annotate(geom = "label", x = 105, y = 0.2, label = "Daughter 1", fill = "white")
myx(N = 15, seed = 34567)$g.sample + annotate(geom = "label", x = 105, y = 0.2, label = "Daughter 2", fill = "white")
myx(N = 15, seed = 45678)$g.sample + annotate(geom = "label", x = 105, y = 0.2, label = "Daughter 3", fill = "white")
myx(N = 15, seed = 12345)$g.sampdist
plot(density(rnorm(100000)), xlim = c(-5, 5) , main = "Normal Distribution, with m = 0, sd = 1", col = "red")
plot(density(rt(100000, df = 5)), xlim = c(-5, 5), main = "T-Distribution with 5 df", col = "red")
plot(density(rchisq(100000,df = 5)), main = "Chi-Square Dist with 5 df", col = "red")
g <- myx(N = 10, biased = TRUE)
g$g.pop
g$g.sampdist
myx(biased = FALSE, re = TRUE)$g.sampdist + ggtitle("Relatively Efficient (N = 10)")
myx(biased = FALSE, re = FALSE)$g.sampdist + ggtitle("Relatively Inefficient (N = 10)")
g <- myx(N = 100, biased = FALSE)
g$g.pop
myx(N = 5, biased = TRUE)$g.sampdist + ggtitle("Cindy: Narrower, but biased so not consistent", "Small N")
myx(N = 100, biased = TRUE)$g.sampdist + ggtitle("Cindy: Narrower, but biased so not consistent", "Large N")
myx(N = 5, biased = FALSE)$g.sampdist + ggtitle("Jan: Narrower, but biased so not consistent", "Small N")
myx(N = 100, biased = FALSE, ic = TRUE)$g.sampdist + ggtitle("Jan: Correct, but fatter, not skinner!", "Large N")
myx(N = 5, biased = TRUE)$g.sampdist + ggtitle("Marsha: Consistent", "Small N")
myx(N = 100, biased = FALSE, ic = FALSE)$g.sampdist + ggtitle("Marsha: Consistent, Large N")
p1 <- mycisMean(N = 10, R = 10)
p2 <- mycisMean(N = 50, R = 10)
p3 <- mycisMean(N = 500, R = 10)
gridExtra::grid.arrange(p1$g, p2$g, p3$g, nrow = 3)
p1 <- mycisVar(N = 10, R = 10)
g1 <- p1$g + scale_x_continuous(limits = c(0, 1700))
p2 <- mycisVar(N = 50, R = 10)
g2 <- p2$g + scale_x_continuous(limits = c(0, 1700))
p3 <- mycisVar(N = 500, R = 10)
g3 <- p3$g + scale_x_continuous(limits = c(0, 1700))
gridExtra::grid.arrange(g1, g2, g3, nrow = 3)
library(soc429Code)
#source("Y:/SOC 429-YOCOM/CLASS CODE/loadPackages.R")
#source("Y:/SOC 429-YOCOM/CLASS CODE/SOC429_CODE.R")
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(tidy = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(comment = "")
#theme_set(theme_minimal())
library(ggplot2)
library(soc429Code)
mycisB(N = 5, R = 15)$g.int + scale_x_continuous(limits = c(-30, 30), breaks = scales::pretty_breaks(10))
#source("Y:/SOC 429-YOCOM/CLASS CODE/loadPackages.R")
#source("Y:/SOC 429-YOCOM/CLASS CODE/SOC429_CODE.R")
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(tidy = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(comment = "")
#theme_set(theme_minimal())
library(ggplot2)
library(soc429Code)
g <- myx(N = 25)
g$g.pop + annotate(geom = "label", x = 105, y = 0.1, label = "Mother", fill = "white")
myx(N = 15, seed = 23456)$g.sample + annotate(geom = "label", x = 105, y = 0.2, label = "Daughter 1", fill = "white")
myx(N = 15, seed = 34567)$g.sample + annotate(geom = "label", x = 105, y = 0.2, label = "Daughter 2", fill = "white")
myx(N = 15, seed = 45678)$g.sample + annotate(geom = "label", x = 105, y = 0.2, label = "Daughter 3", fill = "white")
myx(N = 15, seed = 12345)$g.sampdist
plot(density(rnorm(100000)), xlim = c(-5, 5) , main = "Normal Distribution, with m = 0, sd = 1", col = "red")
plot(density(rt(100000, df = 5)), xlim = c(-5, 5), main = "T-Distribution with 5 df", col = "red")
plot(density(rchisq(100000,df = 5)), main = "Chi-Square Dist with 5 df", col = "red")
g <- myx(N = 10, biased = TRUE)
g$g.pop
g$g.sampdist
myx(biased = FALSE, re = TRUE)$g.sampdist + ggtitle("Relatively Efficient (N = 10)")
myx(biased = FALSE, re = FALSE)$g.sampdist + ggtitle("Relatively Inefficient (N = 10)")
g <- myx(N = 100, biased = FALSE)
g$g.pop
myx(N = 5, biased = TRUE)$g.sampdist + ggtitle("Cindy: Narrower, but biased so not consistent", "Small N")
myx(N = 100, biased = TRUE)$g.sampdist + ggtitle("Cindy: Narrower, but biased so not consistent", "Large N")
myx(N = 5, biased = FALSE)$g.sampdist + ggtitle("Jan: Narrower, but biased so not consistent", "Small N")
myx(N = 100, biased = FALSE, ic = TRUE)$g.sampdist + ggtitle("Jan: Correct, but fatter, not skinner!", "Large N")
myx(N = 5, biased = TRUE)$g.sampdist + ggtitle("Marsha: Consistent", "Small N")
myx(N = 100, biased = FALSE, ic = FALSE)$g.sampdist + ggtitle("Marsha: Consistent, Large N")
p1 <- mycisMean(N = 10, R = 10)
p2 <- mycisMean(N = 50, R = 10)
p3 <- mycisMean(N = 500, R = 10)
gridExtra::grid.arrange(p1$g, p2$g, p3$g, nrow = 3)
p1 <- mycisVar(N = 10, R = 10)
g1 <- p1$g + scale_x_continuous(limits = c(0, 1700))
p2 <- mycisVar(N = 50, R = 10)
g2 <- p2$g + scale_x_continuous(limits = c(0, 1700))
p3 <- mycisVar(N = 500, R = 10)
g3 <- p3$g + scale_x_continuous(limits = c(0, 1700))
gridExtra::grid.arrange(g1, g2, g3, nrow = 3)
mycisB(N = 5, R = 15)$g.int + scale_x_continuous(limits = c(-30, 30), breaks = scales::pretty_breaks(10))
library(soc429Code)
mycisB(N = 5, R = 15)$g.int + scale_x_continuous(limits = c(-30, 30), breaks = scales::pretty_breaks(10))
soc429Code::mycisB(N = 5, R = 15)$g.int + scale_x_continuous(limits = c(-30, 30), breaks = scales::pretty_breaks(10))
library(soc429Code)
mycisB()
mycisB()$g.int
#source("Y:/SOC 429-YOCOM/CLASS CODE/loadPackages.R")
#source("Y:/SOC 429-YOCOM/CLASS CODE/SOC429_CODE.R")
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(tidy = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(comment = "")
#theme_set(theme_minimal())
library(ggplot2)
library(soc429Code)
mycisB(N = 5, R = 15)$g.int + scale_x_continuous(limits = c(-30, 30), breaks = scales::pretty_breaks(10))
mycisB(N = 25, R = 15)$g.int + scale_x_continuous(limits = c(-30, 30), breaks = scales::pretty_breaks(10))
mycisB(N = 500, R = 15)$g.int + scale_x_continuous(limits = c(-30, 30), breaks = scales::pretty_breaks(10))
mycisB(N = 5, R = 15)$g.slope + scale_x_continuous(limits = c(-0, .5), breaks = scales::pretty_breaks(10))
mycisB(N = 25, R = 15)$g.slope + scale_x_continuous(limits = c(-0, .5), breaks = scales::pretty_breaks(10))
mycisB(N = 500, R = 15)$g.slope + scale_x_continuous(limits = c(-0, .5), breaks = scales::pretty_breaks(10))
clearAll <- function() {
rm(list = ls(envir = .GlobalEnv), envir = .GlobalEnv)
gc()
}
clearAll()
minMax <- function(M, variable = "") {
b1 <- attr(terms(M), "term.labels")[1]
b2 <- attr(terms(M), "term.labels")[2]
mm <- -1*coef(M)[b1]/(2*coef(M)[b2])
return(mm)
}
minMax(M = lm(data = mtcars, mpg ~ wt + I(wt^2)), variable = "wt")
uniTable <- function(data, variable) {
variable <- dplyr::enquo(variable)
data %>% dplyr::group_by(!!variable) %>%
dplyr::summarise(Frequency = dplyr::n()) %>%
dplyr::mutate(Proportion = Frequency / sum(Frequency),
Odds = Frequency / (sum(Frequency) - Frequency))
}
uniTable(data = carData::Arrests, variable = employed)
library(carData)
library(tidyverse)
uniTable(data = carData::Arrests, variable = employed)
bivTable <- function(data, group, outcome, compare = FALSE, baseline = "") {
if(compare == TRUE & baseline == "") {
print("Please supply a baseline row of X (the explanatory/row variable) for comparisons")
return()
}
if(!methods::hasArg(data)|!methods::hasArg(group)|!methods::hasArg(outcome)) {
print("Please supply a data frame, group, and outcome.")
return()
}
group <- dplyr::enquo(group)
outcome <- dplyr::enquo(outcome)
if(compare == TRUE & baseline == "") {
print("Please supply a baseline for comparisons.")
return()
}
df <- data %>% dplyr::group_by(!!group, !!outcome) %>%
dplyr::summarise(Frequency = dplyr::n()) %>%
dplyr::mutate(Proportion = Frequency / sum(Frequency),
Odds = Frequency / (sum(Frequency) - Frequency))
if(compare == TRUE) {
df <- df %>% dplyr::group_by(!!outcome, !!group) %>%
dplyr::mutate(order = ifelse(!!group == baseline, 0, 1)) %>%
dplyr::ungroup %>% dplyr::group_by(!!outcome) %>%
dplyr::arrange(order, .by_group = TRUE) %>%
dplyr::mutate(RRR = Proportion/Proportion[1],
RRD = Proportion - Proportion[1],
OR = Odds/Odds[1])
}
if(is.null(df)) return()
else print(df, n = 100)
}
bivTable(data = carData::GSSvocab, group = ageGroup, outcome = nativeBorn)
ggBivTable <- function(table, type = "proportion", total = 1000, failures = 100, success = "") {
df <- as.data.frame(table)
print(df)
if(type == "proportion") {
graphtitle <- paste0("Relative Number of Successes with a Total of ", total, " Events")
df$sv <- -1
df$sv[df[2] != levels(df[[2]])[2]] <- 1
df <- df %>% dplyr::mutate(Frequency = round(Proportion*total,0)) %>%
dplyr::select(-Proportion)
df <- df[rep(1:nrow(df), df[["Frequency"]]), ] %>%
dplyr::select(-Frequency)
df <- df %>% dplyr::arrange(df[1], df[2])
df <- df %>% dplyr::group_by(df[1]) %>%
dplyr::mutate(sesq = round(sv*runif(dplyr::n()), digits = 5)) %>% dplyr::select(-sv)
g <- ggplot2::ggplot(data = df, ggplot2::aes_string(x = colnames(df)[1],
y = colnames(df)[4],
fill = colnames(df)[2])) +
ggplot2::geom_dotplot(binaxis = 'y', stackdir = 'center') +
ggplot2::coord_flip() + ggplot2::xlab("") + ggplot2::ylab("") + ggplot2::theme_minimal() +
ggplot2::theme(axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank()) +
ggplot2::ggtitle(graphtitle)
print(g)
}
if(type == "odds") {
graphtitle <- paste0("Relative Number of Successes with ", failures, " Failures")
df$seq <- -1
df$seq[df[2] == success] <- 1
df$N <- round(df$Odds*failures, 0)
df$N[df[2] != success] <- failures
df <- df %>% dplyr::select(-Proportion, -Frequency)
df <- df[rep(1:nrow(df), df[["N"]]), ]
df$seq <- df$seq*runif(nrow(df))
g <- ggplot2::ggplot(data = df, ggplot2::aes_string(x = colnames(df)[1],
y = colnames(df)[4],
fill = colnames(df)[2])) +
ggplot2::geom_dotplot(binaxis = 'y', stackdir = 'center') +
ggplot2::coord_flip() + ggplot2::xlab("") + ggplot2::ylab("") + ggplot2::theme_minimal() +
ggplot2::theme(axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank()) +
ggplot2::labs(position = "bottom") + ggplot2::ggtitle(graphtitle)
print(g)
}
bt <- bivTable(data = carData::GSSvocab, group = ageGroup, outcome = nativeBorn)
ggBivTable(table = bt, total = 30)
ggBivTable(table = bt, type = "odds", success = "no", failures = 20)
contCompare <- function(data, group, outcome, compare = FALSE, baseline = "", FUN = "mean", quantile = 0.5,
graph = FALSE, graphType = "diff") {
if(compare == TRUE & baseline == "") {
print("Please supply a baseline row of X (the explanatory/row variable) for comparisons")
return()
}
if(!methods::hasArg(data)|!methods::hasArg(group)|!methods::hasArg(outcome)) {
print("Please supply a data frame, group, and outcome.")
return()
}
group <- dplyr::enquo(group)
outcome <- dplyr::enquo(outcome)
if(compare == TRUE & baseline == "") {
print("Please supply a baseline for comparisons.")
return()
}
df <- data %>%
dplyr::select(!!group, !!outcome) %>%
dplyr::group_by(!!group)
df <- df %>% dplyr::summarise(FUN = switch(FUN,
mean = mean(!!outcome, na.rm = TRUE),
median = median(!!outcome, na.rm = TRUE),
min = min(!!outcome, na.rm = TRUE),
max = max(!!outcome, na.rm = TRUE),
sd = sd(!!outcome, na.rm = TRUE),
var = var(!!outcome, na.rm = TRUE),
iqr = IQR(!!outcome, na.rm = TRUE),
quantile = quantile(!!outcome, na.rm = TRUE, probs = quantile)
)) %>%
tidyr::drop_na()
if(compare == TRUE) {
df$b <- df[[2]][df[[1]] == baseline]
df$diff <- df$FUN - df$b
df$ratio <- df$FUN/df$b
df$b <- NULL
df$g <- "Baseline"
if(graph == TRUE & graphType == "diff") df$g <- ifelse(df$diff > 0, "Bigger",
ifelse(df$diff < 0, "Smaller", "Baseline"))
if(graph == TRUE & graphType == "ratio") df$g <- ifelse(df$ratio > 1, "Bigger",
ifelse(df$ratio < 1, "Smaller", "Baseline"))
df$g[df[[1]] == baseline] <- "Baseline"
df$g <- factor(df$g)
}
if(graph == TRUE & compare == FALSE) {
g <- ggplot2::ggplot(data = df, ggplot2::aes_string(x = colnames(df)[1], y = colnames(df)[2])) +
ggplot2::geom_bar(stat = "identity", alpha = 0.6, color = "black") +
ggplot2::ylab(FUN) +
ggplot2::scale_y_continuous(breaks = scales::pretty_breaks(10)) +
ggplot2::coord_flip() +
ggplot2::theme_minimal()
print(g)
}
if(graph == TRUE & compare == TRUE) {
if(graphType == "diff") {
g <- ggplot2::ggplot(data = df, ggplot2::aes_string(x = colnames(df)[1],
y = colnames(df)[3],
fill = "g")) +
ggplot2::geom_bar(stat = "identity", color = "black") +
ggplot2::scale_fill_manual(labels = c("Smaller", "Baseline", "Bigger"),
values = c("Smaller" = "red", "Baseline" = "white", "Bigger" = "green")) +
ggplot2::scale_y_continuous(breaks = scales::pretty_breaks(10)) +
ggplot2:: ylab("Difference") +
ggplot2::coord_flip() +
ggplot2::theme_minimal() +
ggplot2::theme(legend.position = "none")
}
if(graphType == "ratio") {
g <- ggplot2::ggplot(data = df, ggplot2::aes_string(x = colnames(df)[1],
y = colnames(df)[4],
fill = "g")) +
ggplot2::geom_bar(stat = "identity", color = "black") +
ggplot2::scale_fill_manual(labels = c("Smaller", "Baseline", "Bigger"),
values = c("Smaller" = "red", "Baseline" = "white", "Bigger" = "green")) +
ggplot2::scale_y_continuous(breaks = scales::pretty_breaks(10)) +
ggplot2:: ylab("Ratio") +
ggplot2::coord_flip() +
ggplot2::theme_minimal() +
ggplot2::theme(legend.position = "none")
}
if(compare == TRUE) df$g <- NULL
if(graph == TRUE) print(g)
return(df)
}
library(car)
data(car)
data(carData)
data(cardata)
library(tidyverse)
contCompare(data = GSSvocab, group = educGroup, outcome = vocab, graph = FALSE)
contCompare(data = GSSvocab, group = educGroup, outcome = vocab, graph = TRUE,
graphType = "diff", compare = TRUE, baseline = "12 yrs")
contCompare(data = GSSvocab, group = educGroup, outcome = vocab, graph = TRUE,
graphType = "ratio", compare = TRUE, baseline = "16 yrs")
contCompare(data = GSSvocab, group = nativeBorn, outcome = age,
compare = FALSE, graph = TRUE, FUN = "median")
ggUniTable <- function(ut, type = "proportion", total = 100, failures = 100, success = "") {
if(type == "odds" & success == "") {
print("Please identify the 'success' category to calculate the odds.")
return()
}
df <- as.data.frame(ut)
vn <- colnames(df)[1]
L <- levels(df[, 1])
L.length <- length(L)
if(type == "odds") {
successes <- round(df$Odds[df[,1] == success]*failures, 0)
print(successes)
total <- successes + failures
}
graphtitle <- paste0("Relative Frequencies out of ", total, " Observations")
# Create the ordered list of values
gdf <- data.frame(norm = sort(round(runif(n = total), 3)))
# Initialize data for loops
i = 1
seq <- vector()
gp <- vector()
gdf$seq <- ""
startno <- 1
# if(type == "proportion") {
#   while(i <= L.length) {
#     seq[i] <- round(df$Proportion[i]*total, 0)
#     gdf$seq[startno:min(startno + seq[i], total)] <- L[i]
#     startno <- min(seq[i] + 1, total)
#     i <- i + 1
#   }
# }
if(type == "proportion") {
gdf <- df %>%
dplyr::mutate(Frequency = round(Proportion*total, 0)) %>%
dplyr::select(-Proportion, -Odds)
gdf <- gdf[rep(1:nrow(gdf), gdf[["Frequency"]]), ]
gdf <- gdf %>%
dplyr::select(-Frequency) %>%
dplyr::arrange(gdf[1]) %>%
dplyr::rename(seq = names(gdf[1]))
gdf$norm <- sort(runif(nrow(gdf)))
}
if(type == "odds") {
seq <- unlist(c(rep(paste0("Failures (",failures,")"), failures),
rep(paste0(success," (", successes,")"), successes)))
gdf$seq <- seq
}
g <- ggplot2::ggplot(data = gdf, ggplot2::aes(x = 1, y = norm, fill = seq)) +
ggplot2::geom_dotplot(binwidth = 0.02, binaxis = 'y', stackdir = 'center') +
ggplot2::coord_flip() + ggplot2::xlab("") + ggplot2::ylab("") + ggplot2::theme_minimal() +
ggplot2::theme(axis.text = ggplot2::element_blank(),
axis.ticks = ggplot2::element_blank()) +
ggplot2::labs(fill = vn, position = "bottom") + ggplot2::ggtitle(graphtitle)
print(g)
}
ut <- uniTable(data = carData::Arrests, variable = employed)
ggUniTable(ut = ut, total = 600)
ggUniTable(ut = ut, type = "odds", success = "No", failures = 42)
bivTable <- function(data, group, outcome, compare = FALSE, baseline = "") {
if(compare == TRUE & baseline == "") {
print("Please supply a baseline row of X (the explanatory/row variable) for comparisons")
return()
}
if(!methods::hasArg(data)|!methods::hasArg(group)|!methods::hasArg(outcome)) {
print("Please supply a data frame, group, and outcome.")
return()
}
group <- dplyr::enquo(group)
outcome <- dplyr::enquo(outcome)
if(compare == TRUE & baseline == "") {
print("Please supply a baseline for comparisons.")
return()
}
df <- data %>% dplyr::group_by(!!group, !!outcome) %>%
dplyr::summarise(Frequency = dplyr::n()) %>%
dplyr::mutate(Proportion = Frequency / sum(Frequency),
Odds = Frequency / (sum(Frequency) - Frequency))
if(compare == TRUE) {
df <- df %>% dplyr::group_by(!!outcome, !!group) %>%
dplyr::mutate(order = ifelse(!!group == baseline, 0, 1)) %>%
dplyr::ungroup %>% dplyr::group_by(!!outcome) %>%
dplyr::arrange(order, .by_group = TRUE) %>%
dplyr::mutate(RRR = Proportion/Proportion[1],
RRD = Proportion - Proportion[1],
OR = Odds/Odds[1])
}
if(is.null(df)) return()
else print(df, n = 100)
}
bivTable(data = carData::GSSvocab, group = ageGroup, outcome = nativeBorn)
library(soc429Code)
devtools::install_github("prox9974/soc429Code")
re,pve/[aclages)]
remove.packages("soc429Code")
devtools::install_github("prox9974/soc429Code")
remove.packages("soc429Code")
devtools::install_github("prox9974/soc429Code")
library(soc429Code)
# ggBivTable ----------------------------------------
#' Graph a table of relative conditional frequencies as odds or proportions
#'
#' @param table bivTable object. Note that this is NOT a data frame
#' @param type "proportion" or "odds"
#' @param total Total number of observations (for proportions only)
#' @param failures Total number of failures (for odds only)
#' @param success The level of the outcome variable that is a success
#' @importFrom magrittr %>%
#' @examples
#' bt <- bivTable(data = carData::GSSvocab, group = ageGroup, outcome = nativeBorn)
#' ggBivTable(table = bt)
#' ggBivTable(table = bt, type = "odds", success = "no", failures = 20)
#' @export
ggBivTable <- function(table, type = "proportion",  failures = 100, success = "") {
df <- as.data.frame(table)
if(type == "proportion") {
library(ggplot2)
g <- ggplot(df, aes_string(x = colnames(df)[1],
y = colnames(df)[4],
fill = colnames(df)[2])) +
geom_bar(position = "stack", stat = "identity", color = "black") +
coord_flip()
}
if(type == "odds") {
if(success == "") {
print("Please supply a success category for odds")
return()
}
df <- df[df[2] == success, ]
graphtitle <- paste0("Relative Number of Successes with ", failures, " Failures")
df$Odds <- df$Odds*failures
g <- ggplot(df, aes_string(x = colnames(df)[1],
y = "Odds")) +
geom_bar(stat = "identity", alpha = 0.75, color = "black") +
ylab("Successes") +
ggtitle(paste0("Number of successes for every ", failures, " failures")) +
coord_flip()
}
print(g)
}
bt <- bivTable(data = carData::GSSvocab, group = ageGroup, outcome = nativeBorn)
ggBivTable(table = bt)
ggBivTable(table = bt, type = "odds", success = "no", failures = 20)
library(soc429Code)
