df <- as.data.frame(table)
print(df)
if(type == "proportion") {
df$sv <- -1
df$sv[df[2] != levels(df[[2]])[2]] <- 1
df <- df %>% dplyr::mutate(Frequency = round(Proportion*total,0)) %>%
dplyr::select(-Proportion)
df <- df[rep(1:nrow(df), df[["Frequency"]]), ] %>%
dplyr::select(-Frequency)
df <- df %>% dplyr::arrange(df[1], df[2])
df <- df %>% dplyr::group_by(df[1]) %>%
dplyr::mutate(sesq = round(sv*runif(n()), digits = 5)) %>% dplyr::select(-sv)
g <- ggplot2::ggplot(data = df, ggplot2::aes_string(x = colnames(df)[1],
y = colnames(df)[4],
fill = colnames(df)[2])) +
ggplot2::geom_dotplot(binaxis = 'y', stackdir = 'center') +
ggplot2::coord_flip() + ggplot2::xlab("") + ggplot2::ylab("") + ggplot2::theme_minimal() +
ggplot2::theme(axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank()) #+
# ggplot2::labs(fill = vn, position = "bottom") + ggplot2::ggtitle(graphtitle)
print(g)
}
if(type == "odds") {
df$seq <- -1
df$seq[df[2] == success] <- 1
print(df)
df$N <- round(df$Odds*failures, 0)
df$N[df[2] != success] <- failures
df <- df %>% dplyr::select(-Proportion, -Frequency)
df <- df[rep(1:nrow(df), df[["N"]]), ]
df$seq <-seq*runif(nrow(df))
print(df)
}
#gbt <- ggBivTable(table = bt, total = 20)
gbt <- ggBivTable(table = bt, type = "odds", success = "male", failures = 50)
ggBivTable <- function(table, total = 1000, type = "proportion", success = "", failures = 100) {
df <- as.data.frame(table)
print(df)
if(type == "proportion") {
df$sv <- -1
df$sv[df[2] != levels(df[[2]])[2]] <- 1
df <- df %>% dplyr::mutate(Frequency = round(Proportion*total,0)) %>%
dplyr::select(-Proportion)
df <- df[rep(1:nrow(df), df[["Frequency"]]), ] %>%
dplyr::select(-Frequency)
df <- df %>% dplyr::arrange(df[1], df[2])
df <- df %>% dplyr::group_by(df[1]) %>%
dplyr::mutate(sesq = round(sv*runif(n()), digits = 5)) %>% dplyr::select(-sv)
g <- ggplot2::ggplot(data = df, ggplot2::aes_string(x = colnames(df)[1],
y = colnames(df)[4],
fill = colnames(df)[2])) +
ggplot2::geom_dotplot(binaxis = 'y', stackdir = 'center') +
ggplot2::coord_flip() + ggplot2::xlab("") + ggplot2::ylab("") + ggplot2::theme_minimal() +
ggplot2::theme(axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank()) #+
# ggplot2::labs(fill = vn, position = "bottom") + ggplot2::ggtitle(graphtitle)
print(g)
}
if(type == "odds") {
df$seq <- -1
df$seq[df[2] == success] <- 1
df$N <- round(df$Odds*failures, 0)
df$N[df[2] != success] <- failures
df <- df %>% dplyr::select(-Proportion, -Frequency)
df <- df[rep(1:nrow(df), df[["N"]]), ]
df$seq <- df$seq*runif(nrow(df))
print(df)
}
#gbt <- ggBivTable(table = bt, total = 20)
gbt <- ggBivTable(table = bt, type = "odds", success = "male", failures = 50)
ggBivTable <- function(table, total = 1000, type = "proportion", success = "", failures = 100) {
df <- as.data.frame(table)
print(df)
if(type == "proportion") {
df$sv <- -1
df$sv[df[2] != levels(df[[2]])[2]] <- 1
df <- df %>% dplyr::mutate(Frequency = round(Proportion*total,0)) %>%
dplyr::select(-Proportion)
df <- df[rep(1:nrow(df), df[["Frequency"]]), ] %>%
dplyr::select(-Frequency)
df <- df %>% dplyr::arrange(df[1], df[2])
df <- df %>% dplyr::group_by(df[1]) %>%
dplyr::mutate(sesq = round(sv*runif(n()), digits = 5)) %>% dplyr::select(-sv)
g <- ggplot2::ggplot(data = df, ggplot2::aes_string(x = colnames(df)[1],
y = colnames(df)[4],
fill = colnames(df)[2])) +
ggplot2::geom_dotplot(binaxis = 'y', stackdir = 'center') +
ggplot2::coord_flip() + ggplot2::xlab("") + ggplot2::ylab("") + ggplot2::theme_minimal() +
ggplot2::theme(axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank()) #+
# ggplot2::labs(fill = vn, position = "bottom") + ggplot2::ggtitle(graphtitle)
print(g)
}
if(type == "odds") {
df$seq <- -1
df$seq[df[2] == success] <- 1
df$N <- round(df$Odds*failures, 0)
df$N[df[2] != success] <- failures
df <- df %>% dplyr::select(-Proportion, -Frequency)
df <- df[rep(1:nrow(df), df[["N"]]), ]
df$seq <- df$seq*runif(nrow(df))
print(df)
g <- ggplot2::ggplot(data = df, ggplot2::aes_string(x = colnames(df)[1],
y = colnames(df)[4],
fill = colnames(df)[2])) +
ggplot2::geom_dotplot(binaxis = 'y', stackdir = 'center') +
ggplot2::coord_flip() + ggplot2::xlab("") + ggplot2::ylab("") + ggplot2::theme_minimal() +
ggplot2::theme(axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank()) #+
# ggplot2::labs(fill = vn, position = "bottom") + ggplot2::ggtitle(graphtitle)
print(g)
}
#gbt <- ggBivTable(table = bt, total = 20)
gbt <- ggBivTable(table = bt, type = "odds", success = "male", failures = 50)
gbt <- ggBivTable(table = bt, type = "odds", success = "male", failures = 10)
gbt <- ggBivTable(table = bt, type = "odds", success = "male", failures = 20)
bt <- bivTable(data = GSSvocab %>% tidyr::drop_na(), group = ageGroup, outcome = nativeBorn)
gbt <- ggBivTable(table = bt, type = "odds", success = "yes", failures = 20)
gbt <- ggBivTable(table = bt, type = "odds", success = "no", failures = 20)
ggBivTable <- function(table, total = 1000, type = "proportion", success = "", failures = 100) {
df <- as.data.frame(table)
print(df)
if(type == "proportion") {
df$sv <- -1
df$sv[df[2] != levels(df[[2]])[2]] <- 1
df <- df %>% dplyr::mutate(Frequency = round(Proportion*total,0)) %>%
dplyr::select(-Proportion)
df <- df[rep(1:nrow(df), df[["Frequency"]]), ] %>%
dplyr::select(-Frequency)
df <- df %>% dplyr::arrange(df[1], df[2])
df <- df %>% dplyr::group_by(df[1]) %>%
dplyr::mutate(sesq = round(sv*runif(n()), digits = 5)) %>% dplyr::select(-sv)
g <- ggplot2::ggplot(data = df, ggplot2::aes_string(x = colnames(df)[1],
y = colnames(df)[4],
fill = colnames(df)[2])) +
ggplot2::geom_dotplot(binaxis = 'y', stackdir = 'center') +
ggplot2::coord_flip() + ggplot2::xlab("") + ggplot2::ylab("") + ggplot2::theme_minimal() +
ggplot2::theme(axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank()) #+
# ggplot2::labs(fill = vn, position = "bottom") + ggplot2::ggtitle(graphtitle)
print(g)
}
if(type == "odds") {
graphtitle <- paste0("Relative Number of Successes with ", failures, " Failures")
df$seq <- -1
df$seq[df[2] == success] <- 1
df$N <- round(df$Odds*failures, 0)
df$N[df[2] != success] <- failures
df <- df %>% dplyr::select(-Proportion, -Frequency)
df <- df[rep(1:nrow(df), df[["N"]]), ]
df$seq <- df$seq*runif(nrow(df))
print(df)
g <- ggplot2::ggplot(data = df, ggplot2::aes_string(x = colnames(df)[1],
y = colnames(df)[4],
fill = colnames(df)[2])) +
ggplot2::geom_dotplot(binaxis = 'y', stackdir = 'center') +
ggplot2::coord_flip() + ggplot2::xlab("") + ggplot2::ylab("") + ggplot2::theme_minimal() +
ggplot2::theme(axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank()) +
ggplot2::labs(position = "bottom") + ggplot2::ggtitle(graphtitle)
print(g)
}
#gbt <- ggBivTable(table = bt, total = 20)
gbt <- ggBivTable(table = bt, type = "odds", success = "no", failures = 20)
ggBivTable <- function(table, total = 1000, type = "proportion", success = "", failures = 100) {
df <- as.data.frame(table)
print(df)
if(type == "proportion") {
graphtitle <- paste0("Relative Number of Successes with a Total of ", total, " Events")
df$sv <- -1
df$sv[df[2] != levels(df[[2]])[2]] <- 1
df <- df %>% dplyr::mutate(Frequency = round(Proportion*total,0)) %>%
dplyr::select(-Proportion)
df <- df[rep(1:nrow(df), df[["Frequency"]]), ] %>%
dplyr::select(-Frequency)
df <- df %>% dplyr::arrange(df[1], df[2])
df <- df %>% dplyr::group_by(df[1]) %>%
dplyr::mutate(sesq = round(sv*runif(n()), digits = 5)) %>% dplyr::select(-sv)
g <- ggplot2::ggplot(data = df, ggplot2::aes_string(x = colnames(df)[1],
y = colnames(df)[4],
fill = colnames(df)[2])) +
ggplot2::geom_dotplot(binaxis = 'y', stackdir = 'center') +
ggplot2::coord_flip() + ggplot2::xlab("") + ggplot2::ylab("") + ggplot2::theme_minimal() +
ggplot2::theme(axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank()) +
ggplot2::ggtitle(graphtitle)
print(g)
}
if(type == "odds") {
graphtitle <- paste0("Relative Number of Successes with ", failures, " Failures")
df$seq <- -1
df$seq[df[2] == success] <- 1
df$N <- round(df$Odds*failures, 0)
df$N[df[2] != success] <- failures
df <- df %>% dplyr::select(-Proportion, -Frequency)
df <- df[rep(1:nrow(df), df[["N"]]), ]
df$seq <- df$seq*runif(nrow(df))
g <- ggplot2::ggplot(data = df, ggplot2::aes_string(x = colnames(df)[1],
y = colnames(df)[4],
fill = colnames(df)[2])) +
ggplot2::geom_dotplot(binaxis = 'y', stackdir = 'center') +
ggplot2::coord_flip() + ggplot2::xlab("") + ggplot2::ylab("") + ggplot2::theme_minimal() +
ggplot2::theme(axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank()) +
ggplot2::labs(position = "bottom") + ggplot2::ggtitle(graphtitle)
print(g)
}
gbt <- ggBivTable(table = bt, total = 20)
gbt <- ggBivTable(table = bt, total = 30)
gbt <- ggBivTable(table = bt, type = "odds", success = "no", failures = 20)
bt
ggBivTable(table = bt, total = 30, compare = TRUE)
bivTable(table = bt, total = 30, compare = TRUE)
bivTable(data = GSSvocab %>% tidyr::drop_na(), group = ageGroup, outcome = nativeBorn, compare = TRUE)
bivTable(data = GSSvocab %>% tidyr::drop_na(), group = ageGroup, outcome = nativeBorn, compare = TRUE, baseline = "no")
# BIV TABLE ----------------------------------------
bivTable <- function(data, group, outcome, compare = FALSE, baseline = "") {
if(!hasArg(data)|!hasArg(group)|!hasArg(outcome)) {
print("Please supply a data frame, group, and outcome.")
return()
}
group <- enquo(group)
outcome <- enquo(outcome)
if(compare == TRUE & baseline == "") {
print("Please supply a baseline for comparisons.")
return()
}
df <- data %>% dplyr::group_by(!!group, !!outcome) %>%
dplyr::summarise(Frequency = n()) %>%
dplyr::mutate(Proportion = Frequency / sum(Frequency),
Odds = Frequency / (sum(Frequency) - Frequency))
if(compare == TRUE) {
df <- df %>% dplyr::group_by(!!outcome, !!group) %>%
dplyr::mutate(order = ifelse(!!group == baseline, 0, 1)) %>%
ungroup %>% group_by(!!outcome) %>%
arrange(order, .by_group = TRUE) %>%
mutate(RRR = Proportion/Proportion[1],
RRD = Proportion - Proportion[1],
OR = Odds/Odds[1])
}
if(is.null(df)) return()
else print(df, n = 100)
}
bt <- bivTable(data = GSSvocab %>% tidyr::drop_na(), group = ageGroup, outcome = nativeBorn)
bt
bt <- bivTable(data = GSSvocab %>% tidyr::drop_na(), group = ageGroup, outcome = nativeBorn, compare = TRUE, baseline = "18-29")
bt
bivTable(data = GSSvocab %>% tidyr::drop_na(), group = ageGroup, outcome = nativeBorn, compare = TRUE, baseline = "18-29")
gbt <- ggBivTable(table = bt, type = "odds", success = "no", failures = 20)
gbt <- ggBivTable(table = bt, total = 30)
bt <- bivTable(data = GSSvocab %>% tidyr::drop_na(), group = ageGroup, outcome = nativeBorn)
gbt <- ggBivTable(table = bt, total = 30)
gbt <- ggBivTable(table = bt, type = "odds", success = "no", failures = 20)
bivTable(data = GSSvocab %>% tidyr::drop_na(), group = ageGroup, outcome = nativeBorn, compare = TRUE, baseline = "18-29")
?USArrests
?Arrests
library(carData)
?enquo
?hasArg
??hasArg
library(soc429Code)
?'::'
library(soc429Code)
bivTable(data = GSSvocab %>% tidyr::drop_na(), group = ageGroup, outcome = nativeBorn)
?GSSvocab
library(soc429Code)
bivTable(data = carData::GSSvocab %>% tidyr::drop_na(), group = ageGroup, outcome = nativeBorn)
library(soc429Code)
install.packages(c("available", "brio", "cpp11", "credentials", "devtools", "digest", "emmeans", "fs", "glue", "igraph", "pkgbuild", "pkgload", "readr", "remotes", "stringi", "vroom", "withr", "xml2"))
library(soc429Code)
bivTable <- function(data, group, outcome, compare = FALSE, baseline = "") {
if(compare == TRUE & baseline == "") {
print("Please supply a baseline row of X (the explanatory/row variable) for comparisons")
return()
}
if(!methods::hasArg(data)|!methods::hasArg(group)|!methods::hasArg(outcome)) {
print("Please supply a data frame, group, and outcome.")
return()
}
group <- dplyr::enquo(group)
outcome <- dplyr::enquo(outcome)
if(compare == TRUE & baseline == "") {
print("Please supply a baseline for comparisons.")
return()
}
df <- data %>% dplyr::group_by(!!group, !!outcome) %>%
dplyr::summarise(Frequency = dplyr::n()) %>%
dplyr::mutate(Proportion = Frequency / sum(Frequency),
Odds = Frequency / (sum(Frequency) - Frequency))
if(compare == TRUE) {
df <- df %>% dplyr::group_by(!!outcome, !!group) %>%
dplyr::mutate(order = ifelse(!!group == baseline, 0, 1)) %>%
dplyr::ungroup %>% dplyr::group_by(!!outcome) %>%
dplyr::arrange(order, .by_group = TRUE) %>%
dplyr::mutate(RRR = Proportion/Proportion[1],
RRD = Proportion - Proportion[1],
OR = Odds/Odds[1])
}
if(is.null(df)) return()
else print(df, n = 100)
}
bivTable(data = carData::GSSvocab %>% tidyr::drop_na(), group = ageGroup, outcome = nativeBorn)
library(soc429Code)
?magrittr
library(soc429Code)
usethis::use_package("magrittr")
usethis::use_package("carData")
usethis::use_package("magrittr")
library(soc429Code)
install.packages("stats")
install.packages('stats')
install.packages("stats")
library(soc429Code)
data()
library(carData)
data()
?enquo
is.string("")
is.string("abc")
is.character("abc")
uniTable <- function(data, variable) {
if(!is.character(variable)) variable <- dplyr::enquo(variable)
data %>% dplyr::group_by(!!variable) %>%
dplyr::summarise(Frequency = dplyr::n()) %>%
dplyr::mutate(Proportion = Frequency / sum(Frequency),
Odds = Frequency / (sum(Frequency) - Frequency))
}
library(carData)
uniTable(data = carData::Arrests, variable = employed)
uniTable <- function(data, variable) {
print(is.character(variable))
if(!is.character(variable)) variable <- dplyr::enquo(variable)
data %>% dplyr::group_by(!!variable) %>%
dplyr::summarise(Frequency = dplyr::n()) %>%
dplyr::mutate(Proportion = Frequency / sum(Frequency),
Odds = Frequency / (sum(Frequency) - Frequency))
}
library(carData)
uniTable(data = carData::Arrests, variable = employed)
uniTable(data = carData::Arrests, variable = "employed")
uniTable(data = carData::Arrests, variable = employed)
uniTable <- function(data, variable) {
if(is.character(variable)) "print hey"
variable <- dplyr::enquo(variable)
data %>% dplyr::group_by(!!variable) %>%
dplyr::summarise(Frequency = dplyr::n()) %>%
dplyr::mutate(Proportion = Frequency / sum(Frequency),
Odds = Frequency / (sum(Frequency) - Frequency))
}
library(carData)
uniTable(data = carData::Arrests, variable = employed)
uniTable <- function(data, variable) {
if(is.character(variable)) "print hey"
variable <- dplyr::enquo(variable)
data %>% dplyr::group_by(!!variable) %>%
dplyr::summarise(Frequency = dplyr::n()) %>%
dplyr::mutate(Proportion = Frequency / sum(Frequency),
Odds = Frequency / (sum(Frequency) - Frequency))
}
library(carData)
uniTable(data = carData::Arrests, variable = "employed")
data()
head(orange)
head(Orange)
head(Nile)
head(Indometh)
head(mtcars)
minMax <- function(M, variable = "") {
b1 <- attr(terms(M), "term.labels")[1]
b2 <- attr(terms(M), "term.labels")[2]
mm <- -1*coef(M)[b1]/(2*coef(M)[b2])
return(mm)
}
minMax(M = lm(data = mtcars, mpg ~ wt + I(wt^2)), variable = "wt")
letMeEatCake <- function() {
#quality <- -20.20432 + 0.3653374*x - 0.001279287*x^2
b2 <- -250000/47
b1 <- 84500000/47
max <- 151920213
b0 <- 0
myfun <- function(x) 10*(b0 + b1*x + b2*(x^2))/max
g <- ggplot(data = data.frame(x = c(60, 280)), aes(x)) +
stat_function(fun = myfun) +
#scale_y_continuous(breaks = NULL) +
ylab("Quality") +
xlab("Temperature") + geom_vline(xintercept = 169, linetype = "dotted") +
scale_x_continuous(breaks = scales::pretty_breaks(10)) +
scale_y_continuous(breaks = NULL) +
annotate(geom = "label", x = c(75, 100, 169, 200, 230),
y = c(myfun(75), myfun(100), myfun(169), myfun(200), myfun(230)),
label = c("Gross", "Wet", "Perfect", "Overbaked", "Smoking")
)
return(g)
}
letMeEatCake()
library(ggtplo2)
library(ggtplot2)
library(ggplot2)
letMeEatCake()
letMeEatCake <- function() {
#quality <- -20.20432 + 0.3653374*x - 0.001279287*x^2
b2 <- -250000/47
b1 <- 84500000/47
max <- 151920213
b0 <- 0
myfun <- function(x) 10*(b0 + b1*x + b2*(x^2))/max
g <- ggplot(data = data.frame(x = c(60, 280)), aes(x)) +
stat_function(fun = myfun) +
#scale_y_continuous(breaks = NULL) +
ylab("Quality") +
xlab("Temperature") + geom_vline(xintercept = 169, linetype = "dotted") +
scale_x_continuous(breaks = scales::pretty_breaks(10)) +
scale_y_continuous(breaks = NULL) +
annotate(geom = "label", x = c(75, 100, 169, 200, 230),
y = c(myfun(75), myfun(100), myfun(169), myfun(200), myfun(230)),
label = c("Gross", "Wet", "Perfect", "Overbaked", "Smoking")
) +
theme_minimal()
return(g)
}
letMeEatCake()
letMeEatCake <- function() {
b2 <- -250000/47
b1 <- 84500000/47
max <- 151920213
b0 <- 0
myfun <- function(x) 10*(b0 + b1*x + b2*(x^2))/max
g <- ggplot2::ggplot(data = data.frame(x = c(60, 280)), ggplot2::aes(x)) +
ggplot2::stat_function(fun = myfun) +
ggplot2::ylab("Quality") +
ggplot2::xlab("Temperature") +
ggplot2::geom_vline(xintercept = 169, linetype = "dotted") +
ggplot2::scale_x_continuous(breaks = scales::pretty_breaks(10)) +
ggplot2::scale_y_continuous(breaks = NULL) +
ggplot2::annotate(geom = "label", x = c(75, 100, 169, 200, 230),
y = c(myfun(75), myfun(100), myfun(169), myfun(200), myfun(230)),
label = c("Gross", "Wet", "Perfect", "Overbaked", "Smoking")
) +
theme_minimal()
return(g)
}
letMeEatCake()
library(soc429Code)
letMeEatCake <- function() {
b2 <- -250000/47
b1 <- 84500000/47
max <- 151920213
b0 <- 0
myfun <- function(x) 10*(b0 + b1*x + b2*(x^2))/max
g <- ggplot2::ggplot(data = data.frame(x = c(60, 280)), ggplot2::aes(x)) +
ggplot2::stat_function(fun = myfun) +
ggplot2::ylab("Quality") +
ggplot2::xlab("Temperature") +
ggplot2::geom_vline(xintercept = 169, linetype = "dotted") +
ggplot2::scale_x_continuous(breaks = scales::pretty_breaks(10)) +
ggplot2::scale_y_continuous(breaks = NULL) +
ggplot2::annotate(geom = "label", x = c(75, 100, 169, 200, 230),
y = c(myfun(75), myfun(100), myfun(169), myfun(200), myfun(230)),
label = c("Gross", "Wet", "Perfect", "Overbaked", "Smoking")
) +
ggplot2::theme_minimal()
return(g)
}
library(soc429Code)
head(USArrests)
head(Arrests)
m <- glm(released ~ colour, age, type = "binomial")
m <- glm(released ~ colour +  age, family = "binomial")
m <- glm(data = Arrests, released ~ colour +  age, family = "binomial")
orSE(m)
orSE <- function(model) {
broom::tidy(model) %>%
dplyr::mutate(or = exp(estimate),
var.diag = diag(vcov(model)),
or.se = sqrt(or^2 * var.diag)) %>%
dplyr::select(or.se) %>% dplyr::unlist() %>% dplyr::unname()
}
orSE(m)
data()
head(attitude)
head(cars)
head(mtcars)
str(mtcars$am)
m <- glm(data = mtcars, factor(am) ~ mpg + disp, family = "binomial")
orSE(m)
library(soc429Code)
?unname
?prepare_Rd
??prepare_Rd
?unlist
library(soc429Code)
library(Hmisc)
library(soc429Code)
standardizedExample429 <- function(scale = FALSE) {
set.seed(12345)
x <- rnorm(100, 100, 15)
e.bigsd <- rnorm(100, 0, 75)
e.littlesd <- rnorm(100, 0, 2.5)
y.big <- 10*x + e.bigsd
y.little <- x + e.littlesd
if(scale == TRUE) {
y.big <- scale(y.big)
y.little <- scale(y.little)
x <- scale(x)
}
df <- data.frame(x, y.big, y.little)
m.big <- lm(data = df, y.big ~ x)
m.little <- lm(data = df, y.little ~ x)
return(list(m.big = m.big, m.little = m.little, x = x, y.big = y.big, y.little = y.little))
}
standardizedExample429()
library(soc429Code)
