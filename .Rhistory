ggplot2::ggtitle(paste("Variance Estimate when N = ", N)) +
ggplot2::theme_minimal()
return(list(p = p, s = s, g = g))
}
p1 <- mycis.var(N = 10, R = 10)
g1 <- p1$g + ggplot2::scale_x_continuous(limits = c(0, 1700))
p2 <- mycis.var(N = 50, R = 10)
g2 <- p2$g + ggplot2::scale_x_continuous(limits = c(0, 1700))
p3 <- mycis.var(N = 500, R = 10)
g3 <- p3$g + ggplot2::scale_x_continuous(limits = c(0, 1700))
gridExtra::grid.arrange(g1, g2, g3, nrow = 3)
mycis.var <- function( N = 5, R = 10, mean = 100, std = 15) {
p <- data.frame(id = rep(1:R, each = N), x = rnorm(N*R, mean, std))
s <- aggregate(p, FUN = var, by = list(p$id))
s <- s[, c(1, 3)]
colnames(s) <- c("id", "var")
s$ci.l <- ((N - 1)*s$var)/qchisq(0.025, N - 1, lower.tail = TRUE)
s$ci.u <- ((N - 1)*s$var)/qchisq(0.025, N - 1, lower.tail = FALSE)
s <- s[1:min(R, 50), ]
g <- ggplot2::ggplot(data = s, ggplot2::aes(var, id)) +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = ci.l, xmax = ci.u), alpha = 0.5) +
ggplot2::ylab("Sample #")  +
ggplot2::geom_point(color = "red", size = 2) +
ggplot2::ggtitle(paste("Variance Estimate when N = ", N)) +
ggplot2::theme_minimal()
return(list(p = p, s = s, g = g))
}
p1 <- mycis.var(N = 10, R = 10)
g1 <- p1$g + ggplot2::scale_x_continuous(limits = c(0, 1700))
p2 <- mycis.var(N = 50, R = 10)
g2 <- p2$g + ggplot2::scale_x_continuous(limits = c(0, 1700))
p3 <- mycis.var(N = 500, R = 10)
g3 <- p3$g + ggplot2::scale_x_continuous(limits = c(0, 1700))
gridExtra::grid.arrange(g1, g2, g3, nrow = 3)
mycis.var <- function( N = 5, R = 10, mean = 100, std = 15) {
p <- data.frame(id = rep(1:R, each = N), x = rnorm(N*R, mean, std))
s <- aggregate(p, FUN = var, by = list(p$id))
s <- s[, c(1, 3)]
colnames(s) <- c("id", "var")
s$ci.l <- ((N - 1)*s$var)/qchisq(0.025, N - 1, lower.tail = TRUE)
s$ci.u <- ((N - 1)*s$var)/qchisq(0.025, N - 1, lower.tail = FALSE)
s <- s[1:min(R, 50), ] %>% tidyr::drop_na()
g <- ggplot2::ggplot(data = s, ggplot2::aes(var, id)) +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = ci.l, xmax = ci.u), alpha = 0.5) +
ggplot2::ylab("Sample #")  +
ggplot2::geom_point(color = "red", size = 2) +
ggplot2::ggtitle(paste("Variance Estimate when N = ", N)) +
ggplot2::theme_minimal()
return(list(p = p, s = s, g = g))
}
p1 <- mycis.var(N = 10, R = 10)
g1 <- p1$g + ggplot2::scale_x_continuous(limits = c(0, 1700))
p2 <- mycis.var(N = 50, R = 10)
g2 <- p2$g + ggplot2::scale_x_continuous(limits = c(0, 1700))
p3 <- mycis.var(N = 500, R = 10)
g3 <- p3$g + ggplot2::scale_x_continuous(limits = c(0, 1700))
gridExtra::grid.arrange(g1, g2, g3, nrow = 3)
# GRAPH SIMULATED CONVIDENCE INTERVALS --------------------------------------------
#' Simulate normal distributions for the purpose of illustrating desirable properties of estimators
#' @param N Number of samples
#' @param mean Mean of population
#' @param std Standard deviation of population
#' @param seed Random number seed
#' @param biased Generate a biased sampling distribution? True or False
#' @param re Generate a relatively efficient sampling distribution? True or False
#' @param ic Generate an inconsistent sampling distribution? True or False
#' @examples
#' g <- myx(N = 10, biased = TRUE)
#' suppressWarnings(print(g$g.pop))
#' g$g.sampdist
#' myx(biased = FALSE, re = TRUE)$g.sampdist + ggplot2::ggtitle("Relatively Efficient (N = 10)")
#' myx(biased = FALSE, re = FALSE)$g.sampdist + ggplot2::ggtitle("Relatively Inefficient (N = 10)")
#' g <- myx(N = 100, biased = FALSE)
#' g$g.pop
#' myx(N = 5, biased = TRUE)$g.sampdist + ggplot2::ggtitle("Cindy: Narrower, but biased so not consistent", "Small N")
#' myx(N = 100, biased = TRUE)$g.sampdist + ggplot2::ggtitle("Cindy: Narrower, but biased so not consistent", "Large N")
#' @export
#'
mycis.var <- function( N = 5, R = 10, mean = 100, std = 15) {
p <- data.frame(id = rep(1:R, each = N), x = rnorm(N*R, mean, std))
s <- aggregate(p, FUN = var, by = list(p$id))
s <- s[, c(1, 3)]
colnames(s) <- c("id", "var")
s$ci.l <- ((N - 1)*s$var)/qchisq(0.025, N - 1, lower.tail = TRUE)
s$ci.u <- ((N - 1)*s$var)/qchisq(0.025, N - 1, lower.tail = FALSE)
s <- s[1:min(R, 50), ]
g <- ggplot2::ggplot(data = s, ggplot2::aes(var, id)) +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = ci.l, xmax = ci.u), alpha = 0.5) +
ggplot2::ylab("Sample #")  +
ggplot2::geom_point(color = "red", size = 2) +
ggplot2::ggtitle(paste("Variance Estimate when N = ", N)) +
ggplot2::theme_minimal()
return(list(p = p, s = s, g = g))
}
p1 <- mycis.var(N = 10, R = 10)
g1 <- p1$g + ggplot2::scale_x_continuous(limits = c(0, 1700))
p2 <- mycis.var(N = 50, R = 10)
g2 <- p2$g + ggplot2::scale_x_continuous(limits = c(0, 1700))
p3 <- mycis.var(N = 500, R = 10)
g3 <- p3$g + ggplot2::scale_x_continuous(limits = c(0, 1700))
gridExtra::grid.arrange(g1, g2, g3, nrow = 3)
library(soc429Code)
example(mycis.var)
library(soc429Code)
example(mycis.var)
library(soc429Code)
example(mycis.var)
devAskNewPage(ask = FALSE)
example(mycis.var)
library(soc429Code)
example(mycis.var)
mycis.mean <- function( N = 5, id = 1, R = 10, mean = 100, std = 15) {
p <- data.frame(id = rep(1:R, each = N), x = rnorm(N*R, mean, std))
s.m <- aggregate(p, FUN = mean, by = list(p$id))
s.sd <- aggregate(p, FUN = var, by = list(p$id))
s.m <- s.m[, c(1, 3)]
s.sd <- s.sd[, c(1, 3)]
s <- merge(s.m, s.sd, by = "Group.1")
colnames(s) <- c("id", "mean", "sd")
s$sd <- sqrt(s$sd)
s$se <- s$sd/sqrt(N)
s$ci.l <- s$mean + s$se*qt(p = 0.025, df = N - 1, lower.tail = TRUE)
s$ci.u <- s$mean + s$se*qt(p = 0.025, df = N - 1, lower.tail = FALSE)
s <- s[1:min(R, 50), ]
g <- ggplot2::ggplot(data = s, ggplot2::aes(mean, id)) +
ggplot2::geom_errorbarh(aes(xmin = s$ci.l, xmax = s$ci.u), alpha = 0.5) +
ggplot2::ylab("Sample #")  +
ggplot2::geom_point(color = "red", size = 2) +
ggplot2::scale_x_continuous(limits = c(mean - 3*std, mean + 3*std),
breaks = seq(mean-3*std, mean+3*std, std),
labels = seq(mean-3*std, mean+3*std, std) ) +
ggplot2::ggtitle(paste("Mean Estimate when N = ", N))
return(list(p = p, s = s, g = g))
}
mycis.mean()
mycis.mean <- function( N = 5, id = 1, R = 10, mean = 100, std = 15) {
p <- data.frame(id = rep(1:R, each = N), x = rnorm(N*R, mean, std))
s.m <- aggregate(p, FUN = mean, by = list(p$id))
s.sd <- aggregate(p, FUN = var, by = list(p$id))
s.m <- s.m[, c(1, 3)]
s.sd <- s.sd[, c(1, 3)]
s <- merge(s.m, s.sd, by = "Group.1")
colnames(s) <- c("id", "mean", "sd")
s$sd <- sqrt(s$sd)
s$se <- s$sd/sqrt(N)
s$ci.l <- s$mean + s$se*qt(p = 0.025, df = N - 1, lower.tail = TRUE)
s$ci.u <- s$mean + s$se*qt(p = 0.025, df = N - 1, lower.tail = FALSE)
s <- s[1:min(R, 50), ]
g <- ggplot2::ggplot(data = s, ggplot2::aes(mean, id)) +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = s$ci.l, xmax = s$ci.u), alpha = 0.5) +
ggplot2::ylab("Sample #")  +
ggplot2::geom_point(color = "red", size = 2) +
ggplot2::scale_x_continuous(limits = c(mean - 3*std, mean + 3*std),
breaks = seq(mean-3*std, mean+3*std, std),
labels = seq(mean-3*std, mean+3*std, std) ) +
ggplot2::ggtitle(paste("Mean Estimate when N = ", N))
return(list(p = p, s = s, g = g))
}
mycis.mean()
mycis.mean <- function( N = 5, R = 10, mean = 100, std = 15) {
p <- data.frame(id = rep(1:R, each = N), x = rnorm(N*R, mean, std))
s.m <- aggregate(p, FUN = mean, by = list(p$id))
s.sd <- aggregate(p, FUN = var, by = list(p$id))
s.m <- s.m[, c(1, 3)]
s.sd <- s.sd[, c(1, 3)]
s <- merge(s.m, s.sd, by = "Group.1")
colnames(s) <- c("id", "mean", "sd")
s$sd <- sqrt(s$sd)
s$se <- s$sd/sqrt(N)
s$ci.l <- s$mean + s$se*qt(p = 0.025, df = N - 1, lower.tail = TRUE)
s$ci.u <- s$mean + s$se*qt(p = 0.025, df = N - 1, lower.tail = FALSE)
s <- s[1:min(R, 50), ]
g <- ggplot2::ggplot(data = s, ggplot2::aes(mean, id)) +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = ci.l, xmax = ci.u), alpha = 0.5) +
ggplot2::ylab("Sample #")  +
ggplot2::geom_point(color = "red", size = 2) +
ggplot2::scale_x_continuous(limits = c(mean - 3*std, mean + 3*std),
breaks = seq(mean-3*std, mean+3*std, std),
labels = seq(mean-3*std, mean+3*std, std) ) +
ggplot2::ggtitle(paste("Mean Estimate when N = ", N))
return(list(p = p, s = s, g = g))
}
mycis.mean()
mycis.mean(N = 100, R = 20)
library(soc429Code)
mycis.mean <- function( N = 5, R = 10, mean = 100, std = 15) {
p <- data.frame(id = rep(1:R, each = N), x = rnorm(N*R, mean, std))
s.m <- aggregate(p, FUN = mean, by = list(p$id))
s.sd <- aggregate(p, FUN = var, by = list(p$id))
s.m <- s.m[, c(1, 3)]
s.sd <- s.sd[, c(1, 3)]
s <- merge(s.m, s.sd, by = "Group.1")
colnames(s) <- c("id", "mean", "sd")
s$sd <- sqrt(s$sd)
s$se <- s$sd/sqrt(N)
s$ci.l <- s$mean + s$se*qt(p = 0.025, df = N - 1, lower.tail = TRUE)
s$ci.u <- s$mean + s$se*qt(p = 0.025, df = N - 1, lower.tail = FALSE)
s <- s[1:min(R, 50), ]
g <- ggplot2::ggplot(data = s, ggplot2::aes(mean, id)) +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = ci.l, xmax = ci.u), alpha = 0.5) +
ggplot2::ylab("Sample #")  +
ggplot2::geom_point(color = "red", size = 2) +
ggplot2::scale_x_continuous(limits = c(mean - 3*std, mean + 3*std),
breaks = seq(mean-3*std, mean+3*std, std),
labels = seq(mean-3*std, mean+3*std, std) ) +
ggplot2::ggtitle(paste("Mean Estimate when N = ", N)) +
ggplot2::theme_minimal()
invisible(list(p = p, s = s, g = g))
}
mycis.mean(N = 100, R = 20)
mycis.mean <- function( N = 5, R = 10, mean = 100, std = 15) {
p <- data.frame(id = rep(1:R, each = N), x = rnorm(N*R, mean, std))
s.m <- aggregate(p, FUN = mean, by = list(p$id))
s.sd <- aggregate(p, FUN = var, by = list(p$id))
s.m <- s.m[, c(1, 3)]
s.sd <- s.sd[, c(1, 3)]
s <- merge(s.m, s.sd, by = "Group.1")
colnames(s) <- c("id", "mean", "sd")
s$sd <- sqrt(s$sd)
s$se <- s$sd/sqrt(N)
s$ci.l <- s$mean + s$se*qt(p = 0.025, df = N - 1, lower.tail = TRUE)
s$ci.u <- s$mean + s$se*qt(p = 0.025, df = N - 1, lower.tail = FALSE)
s <- s[1:min(R, 50), ]
g <- ggplot2::ggplot(data = s, ggplot2::aes(mean, id)) +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = ci.l, xmax = ci.u), alpha = 0.5) +
ggplot2::ylab("Sample #")  +
ggplot2::geom_point(color = "red", size = 2) +
ggplot2::scale_x_continuous(limits = c(mean - 3*std, mean + 3*std),
breaks = seq(mean-3*std, mean+3*std, std),
labels = seq(mean-3*std, mean+3*std, std) ) +
ggplot2::ggtitle(paste("Mean Estimate when N = ", N)) +
ggplot2::theme_minimal()
print(g)
invisible(list(p = p, s = s, g = g))
}
mycis.mean(N = 100, R = 20)
library(soc429Code)
mycis.mean <- function( N = 5, R = 10, mean = 100, std = 15) {
p <- data.frame(id = rep(1:R, each = N), x = rnorm(N*R, mean, std))
s.m <- aggregate(p, FUN = mean, by = list(p$id))
s.sd <- aggregate(p, FUN = var, by = list(p$id))
s.m <- s.m[, c(1, 3)]
s.sd <- s.sd[, c(1, 3)]
s <- merge(s.m, s.sd, by = "Group.1")
colnames(s) <- c("id", "mean", "sd")
s$sd <- sqrt(s$sd)
s$se <- s$sd/sqrt(N)
s$ci.l <- s$mean + s$se*qt(p = 0.025, df = N - 1, lower.tail = TRUE)
s$ci.u <- s$mean + s$se*qt(p = 0.025, df = N - 1, lower.tail = FALSE)
s <- s[1:min(R, 50), ]
g <- ggplot2::ggplot(data = s, ggplot2::aes(mean, id)) +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = ci.l, xmax = ci.u), alpha = 0.5) +
ggplot2::ylab("Sample #")  +
ggplot2::geom_point(color = "red", size = 2) +
ggplot2::scale_x_continuous(limits = c(mean - 3*std, mean + 3*std),
breaks = seq(mean-3*std, mean+3*std, std),
labels = seq(mean-3*std, mean+3*std, std) ) +
ggplot2::ggtitle(paste("Mean Estimate when N = ", N)) +
ggplot2::theme_minimal()
print(g)
invisible(list(p = p, s = s, g = g))
}
mycis.mean(N = 100, R = 20)
mycis.mean()
clearAll()
library(soc429Code)
example(mycis.mean())
library(soc429Code)
example(mycis.mean())
example(my.cis.mean)
my.cis.mean
example(myx)
library(soc429Code)
clearAll()
library(soc429Code)
mycisMean()
mycisMean <- function( N = 5, R = 10, mean = 100, std = 15) {
p <- data.frame(id = rep(1:R, each = N), x = rnorm(N*R, mean, std))
s.m <- aggregate(p, FUN = mean, by = list(p$id))
s.sd <- aggregate(p, FUN = var, by = list(p$id))
s.m <- s.m[, c(1, 3)]
s.sd <- s.sd[, c(1, 3)]
s <- merge(s.m, s.sd, by = "Group.1")
colnames(s) <- c("id", "mean", "sd")
s$sd <- sqrt(s$sd)
s$se <- s$sd/sqrt(N)
s$ci.l <- s$mean + s$se*qt(p = 0.025, df = N - 1, lower.tail = TRUE)
s$ci.u <- s$mean + s$se*qt(p = 0.025, df = N - 1, lower.tail = FALSE)
s <- s[1:min(R, 50), ]
g <- ggplot2::ggplot(data = s, ggplot2::aes(mean, id)) +
ggplot2::geom_errorbarh(ggplot2::aes(xmin = ci.l, xmax = ci.u), alpha = 0.5) +
ggplot2::ylab("Sample #")  +
ggplot2::geom_point(color = "red", size = 2) +
ggplot2::scale_x_continuous(limits = c(mean - 3*std, mean + 3*std),
breaks = seq(mean-3*std, mean+3*std, std),
labels = seq(mean-3*std, mean+3*std, std) ) +
ggplot2::ggtitle(paste("Mean Estimate when N = ", N)) +
ggplot2::theme_minimal()
print(g)
invisible(list(p = p, s = s, g = g))
}
mycisMean()
library(soc429Code)
example(mycisMeans())
example(mycisMeans)
library(soc429Code)
example(mycisMean())
example(mycisMean
)
source("Y:/SOC 429-YOCOM/CLASS CODE/loadPackages.R")
#source("Y:/SOC 429-YOCOM/CLASS CODE/loadPackages.R")
#source("Y:/SOC 429-YOCOM/CLASS CODE/SOC429_CODE.R")
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(tidy = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(comment = "")
theme_set(theme_minimal())
#source("Y:/SOC 429-YOCOM/CLASS CODE/loadPackages.R")
#source("Y:/SOC 429-YOCOM/CLASS CODE/SOC429_CODE.R")
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(tidy = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(comment = "")
#theme_set(theme_minimal())
myx(N = 15, seed = 23456)$g.sample + annotate(geom = "label", x = 105, y = 0.2, label = "Daughter 1", fill = "white")
library(ggplot2)
g <- myx(N = 25)
g$g.pop + annotate(geom = "label", x = 105, y = 0.1, label = "Mother", fill = "white")
myx(N = 15, seed = 23456)$g.sample + annotate(geom = "label", x = 105, y = 0.2, label = "Daughter 1", fill = "white")
myx(N = 15, seed = 34567)$g.sample + annotate(geom = "label", x = 105, y = 0.2, label = "Daughter 2", fill = "white")
myx(N = 15, seed = 45678)$g.sample + annotate(geom = "label", x = 105, y = 0.2, label = "Daughter 3", fill = "white")
g <- myx(N = 10, biased = TRUE)
g$g.pop
g$g.sampdist
p1 <- mycisMean(N = 10, R = 10)
p2 <- mycisMean(N = 50, R = 10)
p3 <- mycisMean(N = 500, R = 10)
gridExtra::grid.arrange(p1$g, p2$g, p3$g, nrow = 3)
p1 <- mycisVar(N = 10, R = 10)
clearAll()
#source("Y:/SOC 429-YOCOM/CLASS CODE/loadPackages.R")
#source("Y:/SOC 429-YOCOM/CLASS CODE/SOC429_CODE.R")
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(tidy = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(comment = "")
#theme_set(theme_minimal())
library(ggplot2)
g <- myx(N = 25)
#source("Y:/SOC 429-YOCOM/CLASS CODE/loadPackages.R")
#source("Y:/SOC 429-YOCOM/CLASS CODE/SOC429_CODE.R")
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(tidy = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(comment = "")
#theme_set(theme_minimal())
library(ggplot2)
library(soc429Code)
g <- myx(N = 25)
g$g.pop + annotate(geom = "label", x = 105, y = 0.1, label = "Mother", fill = "white")
myx(N = 15, seed = 23456)$g.sample + annotate(geom = "label", x = 105, y = 0.2, label = "Daughter 1", fill = "white")
myx(N = 15, seed = 34567)$g.sample + annotate(geom = "label", x = 105, y = 0.2, label = "Daughter 2", fill = "white")
myx(N = 15, seed = 45678)$g.sample + annotate(geom = "label", x = 105, y = 0.2, label = "Daughter 3", fill = "white")
myx(N = 15, seed = 12345)$g.sampdist
plot(density(rnorm(100000)), xlim = c(-5, 5) , main = "Normal Distribution, with m = 0, sd = 1", col = "red")
plot(density(rt(100000, df = 5)), xlim = c(-5, 5), main = "T-Distribution with 5 df", col = "red")
plot(density(rchisq(100000,df = 5)), main = "Chi-Square Dist with 5 df", col = "red")
g <- myx(N = 10, biased = TRUE)
g$g.pop
g$g.sampdist
myx(biased = FALSE, re = TRUE)$g.sampdist + ggtitle("Relatively Efficient (N = 10)")
myx(biased = FALSE, re = FALSE)$g.sampdist + ggtitle("Relatively Inefficient (N = 10)")
g <- myx(N = 100, biased = FALSE)
g$g.pop
myx(N = 5, biased = TRUE)$g.sampdist + ggtitle("Cindy: Narrower, but biased so not consistent", "Small N")
myx(N = 100, biased = TRUE)$g.sampdist + ggtitle("Cindy: Narrower, but biased so not consistent", "Large N")
myx(N = 5, biased = FALSE)$g.sampdist + ggtitle("Jan: Narrower, but biased so not consistent", "Small N")
myx(N = 100, biased = FALSE, ic = TRUE)$g.sampdist + ggtitle("Jan: Correct, but fatter, not skinner!", "Large N")
myx(N = 5, biased = TRUE)$g.sampdist + ggtitle("Marsha: Consistent", "Small N")
myx(N = 100, biased = FALSE, ic = FALSE)$g.sampdist + ggtitle("Marsha: Consistent, Large N")
p1 <- mycisMean(N = 10, R = 10)
??mycisMean
p1 <- soc429Code::mycisMean(N = 10, R = 10)
install.packages("soc429Code")
devtools::install_github("prox9974/soc429Code")
install.packages(c("backports", "fs", "glue", "httpuv", "openxlsx", "raster", "testthat"))
library(soc429Code)
#source("Y:/SOC 429-YOCOM/CLASS CODE/loadPackages.R")
#source("Y:/SOC 429-YOCOM/CLASS CODE/SOC429_CODE.R")
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(tidy = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(comment = "")
#theme_set(theme_minimal())
library(ggplot2)
library(soc429Code)
g <- myx(N = 25)
g$g.pop + annotate(geom = "label", x = 105, y = 0.1, label = "Mother", fill = "white")
myx(N = 15, seed = 23456)$g.sample + annotate(geom = "label", x = 105, y = 0.2, label = "Daughter 1", fill = "white")
myx(N = 15, seed = 34567)$g.sample + annotate(geom = "label", x = 105, y = 0.2, label = "Daughter 2", fill = "white")
myx(N = 15, seed = 45678)$g.sample + annotate(geom = "label", x = 105, y = 0.2, label = "Daughter 3", fill = "white")
myx(N = 15, seed = 12345)$g.sampdist
plot(density(rnorm(100000)), xlim = c(-5, 5) , main = "Normal Distribution, with m = 0, sd = 1", col = "red")
plot(density(rt(100000, df = 5)), xlim = c(-5, 5), main = "T-Distribution with 5 df", col = "red")
plot(density(rchisq(100000,df = 5)), main = "Chi-Square Dist with 5 df", col = "red")
g <- myx(N = 10, biased = TRUE)
g$g.pop
g$g.sampdist
myx(biased = FALSE, re = TRUE)$g.sampdist + ggtitle("Relatively Efficient (N = 10)")
myx(biased = FALSE, re = FALSE)$g.sampdist + ggtitle("Relatively Inefficient (N = 10)")
g <- myx(N = 100, biased = FALSE)
g$g.pop
myx(N = 5, biased = TRUE)$g.sampdist + ggtitle("Cindy: Narrower, but biased so not consistent", "Small N")
myx(N = 100, biased = TRUE)$g.sampdist + ggtitle("Cindy: Narrower, but biased so not consistent", "Large N")
myx(N = 5, biased = FALSE)$g.sampdist + ggtitle("Jan: Narrower, but biased so not consistent", "Small N")
myx(N = 100, biased = FALSE, ic = TRUE)$g.sampdist + ggtitle("Jan: Correct, but fatter, not skinner!", "Large N")
myx(N = 5, biased = TRUE)$g.sampdist + ggtitle("Marsha: Consistent", "Small N")
myx(N = 100, biased = FALSE, ic = FALSE)$g.sampdist + ggtitle("Marsha: Consistent, Large N")
p1 <- mycisMean(N = 10, R = 10)
p2 <- mycisMean(N = 50, R = 10)
p3 <- mycisMean(N = 500, R = 10)
gridExtra::grid.arrange(p1$g, p2$g, p3$g, nrow = 3)
p1 <- mycisVar(N = 10, R = 10)
g1 <- p1$g + scale_x_continuous(limits = c(0, 1700))
p2 <- mycisVar(N = 50, R = 10)
g2 <- p2$g + scale_x_continuous(limits = c(0, 1700))
p3 <- mycisVar(N = 500, R = 10)
g3 <- p3$g + scale_x_continuous(limits = c(0, 1700))
gridExtra::grid.arrange(g1, g2, g3, nrow = 3)
library(soc429Code)
#source("Y:/SOC 429-YOCOM/CLASS CODE/loadPackages.R")
#source("Y:/SOC 429-YOCOM/CLASS CODE/SOC429_CODE.R")
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(tidy = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(comment = "")
#theme_set(theme_minimal())
library(ggplot2)
library(soc429Code)
mycisB(N = 5, R = 15)$g.int + scale_x_continuous(limits = c(-30, 30), breaks = scales::pretty_breaks(10))
#source("Y:/SOC 429-YOCOM/CLASS CODE/loadPackages.R")
#source("Y:/SOC 429-YOCOM/CLASS CODE/SOC429_CODE.R")
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(tidy = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(comment = "")
#theme_set(theme_minimal())
library(ggplot2)
library(soc429Code)
g <- myx(N = 25)
g$g.pop + annotate(geom = "label", x = 105, y = 0.1, label = "Mother", fill = "white")
myx(N = 15, seed = 23456)$g.sample + annotate(geom = "label", x = 105, y = 0.2, label = "Daughter 1", fill = "white")
myx(N = 15, seed = 34567)$g.sample + annotate(geom = "label", x = 105, y = 0.2, label = "Daughter 2", fill = "white")
myx(N = 15, seed = 45678)$g.sample + annotate(geom = "label", x = 105, y = 0.2, label = "Daughter 3", fill = "white")
myx(N = 15, seed = 12345)$g.sampdist
plot(density(rnorm(100000)), xlim = c(-5, 5) , main = "Normal Distribution, with m = 0, sd = 1", col = "red")
plot(density(rt(100000, df = 5)), xlim = c(-5, 5), main = "T-Distribution with 5 df", col = "red")
plot(density(rchisq(100000,df = 5)), main = "Chi-Square Dist with 5 df", col = "red")
g <- myx(N = 10, biased = TRUE)
g$g.pop
g$g.sampdist
myx(biased = FALSE, re = TRUE)$g.sampdist + ggtitle("Relatively Efficient (N = 10)")
myx(biased = FALSE, re = FALSE)$g.sampdist + ggtitle("Relatively Inefficient (N = 10)")
g <- myx(N = 100, biased = FALSE)
g$g.pop
myx(N = 5, biased = TRUE)$g.sampdist + ggtitle("Cindy: Narrower, but biased so not consistent", "Small N")
myx(N = 100, biased = TRUE)$g.sampdist + ggtitle("Cindy: Narrower, but biased so not consistent", "Large N")
myx(N = 5, biased = FALSE)$g.sampdist + ggtitle("Jan: Narrower, but biased so not consistent", "Small N")
myx(N = 100, biased = FALSE, ic = TRUE)$g.sampdist + ggtitle("Jan: Correct, but fatter, not skinner!", "Large N")
myx(N = 5, biased = TRUE)$g.sampdist + ggtitle("Marsha: Consistent", "Small N")
myx(N = 100, biased = FALSE, ic = FALSE)$g.sampdist + ggtitle("Marsha: Consistent, Large N")
p1 <- mycisMean(N = 10, R = 10)
p2 <- mycisMean(N = 50, R = 10)
p3 <- mycisMean(N = 500, R = 10)
gridExtra::grid.arrange(p1$g, p2$g, p3$g, nrow = 3)
p1 <- mycisVar(N = 10, R = 10)
g1 <- p1$g + scale_x_continuous(limits = c(0, 1700))
p2 <- mycisVar(N = 50, R = 10)
g2 <- p2$g + scale_x_continuous(limits = c(0, 1700))
p3 <- mycisVar(N = 500, R = 10)
g3 <- p3$g + scale_x_continuous(limits = c(0, 1700))
gridExtra::grid.arrange(g1, g2, g3, nrow = 3)
mycisB(N = 5, R = 15)$g.int + scale_x_continuous(limits = c(-30, 30), breaks = scales::pretty_breaks(10))
library(soc429Code)
mycisB(N = 5, R = 15)$g.int + scale_x_continuous(limits = c(-30, 30), breaks = scales::pretty_breaks(10))
soc429Code::mycisB(N = 5, R = 15)$g.int + scale_x_continuous(limits = c(-30, 30), breaks = scales::pretty_breaks(10))
library(soc429Code)
mycisB()
mycisB()$g.int
#source("Y:/SOC 429-YOCOM/CLASS CODE/loadPackages.R")
#source("Y:/SOC 429-YOCOM/CLASS CODE/SOC429_CODE.R")
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(tidy = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(comment = "")
#theme_set(theme_minimal())
library(ggplot2)
library(soc429Code)
mycisB(N = 5, R = 15)$g.int + scale_x_continuous(limits = c(-30, 30), breaks = scales::pretty_breaks(10))
mycisB(N = 25, R = 15)$g.int + scale_x_continuous(limits = c(-30, 30), breaks = scales::pretty_breaks(10))
mycisB(N = 500, R = 15)$g.int + scale_x_continuous(limits = c(-30, 30), breaks = scales::pretty_breaks(10))
mycisB(N = 5, R = 15)$g.slope + scale_x_continuous(limits = c(-0, .5), breaks = scales::pretty_breaks(10))
mycisB(N = 25, R = 15)$g.slope + scale_x_continuous(limits = c(-0, .5), breaks = scales::pretty_breaks(10))
mycisB(N = 500, R = 15)$g.slope + scale_x_continuous(limits = c(-0, .5), breaks = scales::pretty_breaks(10))
