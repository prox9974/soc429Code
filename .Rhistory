df$N <- round(df$Odds*failures, 0)
df$N[df[2] != success] <- failures
df <- df %>% dplyr::select(-Proportion, -Frequency)
df <- df[rep(1:nrow(df), df[["N"]]), ]
df$seq <- df$seq*runif(nrow(df))
g <- ggplot2::ggplot(data = df, ggplot2::aes_string(x = colnames(df)[1],
y = colnames(df)[4],
fill = colnames(df)[2])) +
ggplot2::geom_dotplot(binaxis = 'y', stackdir = 'center') +
ggplot2::coord_flip() + ggplot2::xlab("") + ggplot2::ylab("") + ggplot2::theme_minimal() +
ggplot2::theme(axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank()) +
ggplot2::labs(position = "bottom") + ggplot2::ggtitle(graphtitle)
print(g)
}
bt <- bivTable(data = carData::GSSvocab, group = ageGroup, outcome = nativeBorn)
ggBivTable(table = bt, total = 30)
ggBivTable(table = bt, type = "odds", success = "no", failures = 20)
contCompare <- function(data, group, outcome, compare = FALSE, baseline = "", FUN = "mean", quantile = 0.5,
graph = FALSE, graphType = "diff") {
if(compare == TRUE & baseline == "") {
print("Please supply a baseline row of X (the explanatory/row variable) for comparisons")
return()
}
if(!methods::hasArg(data)|!methods::hasArg(group)|!methods::hasArg(outcome)) {
print("Please supply a data frame, group, and outcome.")
return()
}
group <- dplyr::enquo(group)
outcome <- dplyr::enquo(outcome)
if(compare == TRUE & baseline == "") {
print("Please supply a baseline for comparisons.")
return()
}
df <- data %>%
dplyr::select(!!group, !!outcome) %>%
dplyr::group_by(!!group)
df <- df %>% dplyr::summarise(FUN = switch(FUN,
mean = mean(!!outcome, na.rm = TRUE),
median = median(!!outcome, na.rm = TRUE),
min = min(!!outcome, na.rm = TRUE),
max = max(!!outcome, na.rm = TRUE),
sd = sd(!!outcome, na.rm = TRUE),
var = var(!!outcome, na.rm = TRUE),
iqr = IQR(!!outcome, na.rm = TRUE),
quantile = quantile(!!outcome, na.rm = TRUE, probs = quantile)
)) %>%
tidyr::drop_na()
if(compare == TRUE) {
df$b <- df[[2]][df[[1]] == baseline]
df$diff <- df$FUN - df$b
df$ratio <- df$FUN/df$b
df$b <- NULL
df$g <- "Baseline"
if(graph == TRUE & graphType == "diff") df$g <- ifelse(df$diff > 0, "Bigger",
ifelse(df$diff < 0, "Smaller", "Baseline"))
if(graph == TRUE & graphType == "ratio") df$g <- ifelse(df$ratio > 1, "Bigger",
ifelse(df$ratio < 1, "Smaller", "Baseline"))
df$g[df[[1]] == baseline] <- "Baseline"
df$g <- factor(df$g)
}
if(graph == TRUE & compare == FALSE) {
g <- ggplot2::ggplot(data = df, ggplot2::aes_string(x = colnames(df)[1], y = colnames(df)[2])) +
ggplot2::geom_bar(stat = "identity", alpha = 0.6, color = "black") +
ggplot2::ylab(FUN) +
ggplot2::scale_y_continuous(breaks = scales::pretty_breaks(10)) +
ggplot2::coord_flip() +
ggplot2::theme_minimal()
print(g)
}
if(graph == TRUE & compare == TRUE) {
if(graphType == "diff") {
g <- ggplot2::ggplot(data = df, ggplot2::aes_string(x = colnames(df)[1],
y = colnames(df)[3],
fill = "g")) +
ggplot2::geom_bar(stat = "identity", color = "black") +
ggplot2::scale_fill_manual(labels = c("Smaller", "Baseline", "Bigger"),
values = c("Smaller" = "red", "Baseline" = "white", "Bigger" = "green")) +
ggplot2::scale_y_continuous(breaks = scales::pretty_breaks(10)) +
ggplot2:: ylab("Difference") +
ggplot2::coord_flip() +
ggplot2::theme_minimal() +
ggplot2::theme(legend.position = "none")
}
if(graphType == "ratio") {
g <- ggplot2::ggplot(data = df, ggplot2::aes_string(x = colnames(df)[1],
y = colnames(df)[4],
fill = "g")) +
ggplot2::geom_bar(stat = "identity", color = "black") +
ggplot2::scale_fill_manual(labels = c("Smaller", "Baseline", "Bigger"),
values = c("Smaller" = "red", "Baseline" = "white", "Bigger" = "green")) +
ggplot2::scale_y_continuous(breaks = scales::pretty_breaks(10)) +
ggplot2:: ylab("Ratio") +
ggplot2::coord_flip() +
ggplot2::theme_minimal() +
ggplot2::theme(legend.position = "none")
}
if(compare == TRUE) df$g <- NULL
if(graph == TRUE) print(g)
return(df)
}
library(car)
data(car)
data(carData)
data(cardata)
library(tidyverse)
contCompare(data = GSSvocab, group = educGroup, outcome = vocab, graph = FALSE)
contCompare(data = GSSvocab, group = educGroup, outcome = vocab, graph = TRUE,
graphType = "diff", compare = TRUE, baseline = "12 yrs")
contCompare(data = GSSvocab, group = educGroup, outcome = vocab, graph = TRUE,
graphType = "ratio", compare = TRUE, baseline = "16 yrs")
contCompare(data = GSSvocab, group = nativeBorn, outcome = age,
compare = FALSE, graph = TRUE, FUN = "median")
ggUniTable <- function(ut, type = "proportion", total = 100, failures = 100, success = "") {
if(type == "odds" & success == "") {
print("Please identify the 'success' category to calculate the odds.")
return()
}
df <- as.data.frame(ut)
vn <- colnames(df)[1]
L <- levels(df[, 1])
L.length <- length(L)
if(type == "odds") {
successes <- round(df$Odds[df[,1] == success]*failures, 0)
print(successes)
total <- successes + failures
}
graphtitle <- paste0("Relative Frequencies out of ", total, " Observations")
# Create the ordered list of values
gdf <- data.frame(norm = sort(round(runif(n = total), 3)))
# Initialize data for loops
i = 1
seq <- vector()
gp <- vector()
gdf$seq <- ""
startno <- 1
# if(type == "proportion") {
#   while(i <= L.length) {
#     seq[i] <- round(df$Proportion[i]*total, 0)
#     gdf$seq[startno:min(startno + seq[i], total)] <- L[i]
#     startno <- min(seq[i] + 1, total)
#     i <- i + 1
#   }
# }
if(type == "proportion") {
gdf <- df %>%
dplyr::mutate(Frequency = round(Proportion*total, 0)) %>%
dplyr::select(-Proportion, -Odds)
gdf <- gdf[rep(1:nrow(gdf), gdf[["Frequency"]]), ]
gdf <- gdf %>%
dplyr::select(-Frequency) %>%
dplyr::arrange(gdf[1]) %>%
dplyr::rename(seq = names(gdf[1]))
gdf$norm <- sort(runif(nrow(gdf)))
}
if(type == "odds") {
seq <- unlist(c(rep(paste0("Failures (",failures,")"), failures),
rep(paste0(success," (", successes,")"), successes)))
gdf$seq <- seq
}
g <- ggplot2::ggplot(data = gdf, ggplot2::aes(x = 1, y = norm, fill = seq)) +
ggplot2::geom_dotplot(binwidth = 0.02, binaxis = 'y', stackdir = 'center') +
ggplot2::coord_flip() + ggplot2::xlab("") + ggplot2::ylab("") + ggplot2::theme_minimal() +
ggplot2::theme(axis.text = ggplot2::element_blank(),
axis.ticks = ggplot2::element_blank()) +
ggplot2::labs(fill = vn, position = "bottom") + ggplot2::ggtitle(graphtitle)
print(g)
}
ut <- uniTable(data = carData::Arrests, variable = employed)
ggUniTable(ut = ut, total = 600)
ggUniTable(ut = ut, type = "odds", success = "No", failures = 42)
bivTable <- function(data, group, outcome, compare = FALSE, baseline = "") {
if(compare == TRUE & baseline == "") {
print("Please supply a baseline row of X (the explanatory/row variable) for comparisons")
return()
}
if(!methods::hasArg(data)|!methods::hasArg(group)|!methods::hasArg(outcome)) {
print("Please supply a data frame, group, and outcome.")
return()
}
group <- dplyr::enquo(group)
outcome <- dplyr::enquo(outcome)
if(compare == TRUE & baseline == "") {
print("Please supply a baseline for comparisons.")
return()
}
df <- data %>% dplyr::group_by(!!group, !!outcome) %>%
dplyr::summarise(Frequency = dplyr::n()) %>%
dplyr::mutate(Proportion = Frequency / sum(Frequency),
Odds = Frequency / (sum(Frequency) - Frequency))
if(compare == TRUE) {
df <- df %>% dplyr::group_by(!!outcome, !!group) %>%
dplyr::mutate(order = ifelse(!!group == baseline, 0, 1)) %>%
dplyr::ungroup %>% dplyr::group_by(!!outcome) %>%
dplyr::arrange(order, .by_group = TRUE) %>%
dplyr::mutate(RRR = Proportion/Proportion[1],
RRD = Proportion - Proportion[1],
OR = Odds/Odds[1])
}
if(is.null(df)) return()
else print(df, n = 100)
}
bivTable(data = carData::GSSvocab, group = ageGroup, outcome = nativeBorn)
library(soc429Code)
devtools::install_github("prox9974/soc429Code")
re,pve/[aclages)]
remove.packages("soc429Code")
devtools::install_github("prox9974/soc429Code")
remove.packages("soc429Code")
devtools::install_github("prox9974/soc429Code")
library(soc429Code)
# ggBivTable ----------------------------------------
#' Graph a table of relative conditional frequencies as odds or proportions
#'
#' @param table bivTable object. Note that this is NOT a data frame
#' @param type "proportion" or "odds"
#' @param total Total number of observations (for proportions only)
#' @param failures Total number of failures (for odds only)
#' @param success The level of the outcome variable that is a success
#' @importFrom magrittr %>%
#' @examples
#' bt <- bivTable(data = carData::GSSvocab, group = ageGroup, outcome = nativeBorn)
#' ggBivTable(table = bt)
#' ggBivTable(table = bt, type = "odds", success = "no", failures = 20)
#' @export
ggBivTable <- function(table, type = "proportion",  failures = 100, success = "") {
df <- as.data.frame(table)
if(type == "proportion") {
library(ggplot2)
g <- ggplot(df, aes_string(x = colnames(df)[1],
y = colnames(df)[4],
fill = colnames(df)[2])) +
geom_bar(position = "stack", stat = "identity", color = "black") +
coord_flip()
}
if(type == "odds") {
if(success == "") {
print("Please supply a success category for odds")
return()
}
df <- df[df[2] == success, ]
graphtitle <- paste0("Relative Number of Successes with ", failures, " Failures")
df$Odds <- df$Odds*failures
g <- ggplot(df, aes_string(x = colnames(df)[1],
y = "Odds")) +
geom_bar(stat = "identity", alpha = 0.75, color = "black") +
ylab("Successes") +
ggtitle(paste0("Number of successes for every ", failures, " failures")) +
coord_flip()
}
print(g)
}
bt <- bivTable(data = carData::GSSvocab, group = ageGroup, outcome = nativeBorn)
ggBivTable(table = bt)
ggBivTable(table = bt, type = "odds", success = "no", failures = 20)
library(soc429Code)
# GRAPH LOGTRANSFORMED OUTCOMES ---------------------------------------
#' Graph an outcome variable that has been log transformed
#' @param xstart starting value of x
#' @param increment how much x increases
#' @param int intercept
#' @param b1 slope
#' @param xlog whether x is logged or not
#' @param ylog whether y is logged or not
#' @param xmin minimum of x axis
#' @param xmax maximum of x axis
#' @param ymin minimum of y axis
#' @param ymax maximum of y axis
#' @param digits number of digits to print
#' @examples
#' logPlot(xstart = 150, xincrement = 1, int = int, b1 = b1, ylog = TRUE, xmin = 148, xmax = 152)
#' @export
#'
#'# LOGPLOT -----------------------------------------------------------------
logPlot <- function(xstart = 0, xincrement = 1, int = 0, b1 = 1, xlog = FALSE,
ylog = TRUE, xmin, xmax, ymin = NULL, ymax = NULL, digits = 2) {
library(scales)
if(ylog == TRUE & xlog == FALSE) {
thisfun <- function(x) { exp(int + b1*x) }
title <- "Logged Outcome, Non-Logged X"
xend <- xstart + xincrement
}
else if(ylog == FALSE & xlog == FALSE) {
thisfun <- function(x) { int + b1*x }
title <- "Non-Logged Outcome & Non-Logged X"
xend <- xstart + xincrement
}
else if(ylog == TRUE & xlog == TRUE) {
thisfun <- function(x) exp(int + b1*log(x))
title <- "Logged Outcome, Logged X"
xend <- xstart*xincrement
}
else if(ylog == FALSE & xlog == TRUE) {
thisfun <- function(x)  int + b1*log(x)
title <- "Non-Logged Outcome & Logged X"
xend <- xstart*xincrement
}
if(is.null(ymin) & is.null(ymax)) ylims <- c(NA, NA)
else if(is.null(ymin) & !is.null(ymax)) ylims <- c(NA, ymax)
else if(!is.null(ymin) & is.null(ymax)) ylims <- c(ymin, NA)
else ylims <- c(ymin, ymax)
g <- ggplot2::ggplot(data = data.frame(x = c(xmin, xmax)), ggplot2::aes(x = x)) +
ggplot2::stat_function(fun = thisfun, size = 2) +
ggplot2::theme_minimal() + ggplot2::xlab("X") + ggplot2::ylab(title) +
ggplot2::ggtitle(title) +
ggplot2::scale_y_continuous(limits = ylims, breaks = scales::pretty_breaks(n = 10)) +
ggplot2::scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
ggplot2::geom_hline(yintercept = thisfun(xstart), linetype = "dotted") +
ggplot2::geom_hline(yintercept = thisfun(xend), linetype = "dotted") +
ggplot2::geom_vline(xintercept = xstart, linetype = "dotted") +
ggplot2::geom_vline(xintercept = xend, linetype = "dotted") +
ggplot2::annotate(geom = "label", xmin, thisfun(xstart), label = paste("Start: ",round(thisfun(xstart), digits)), fill = "plum1", size = 6, hjust = 0) +
ggplot2::annotate(geom = "label", xmin, thisfun(xend), label = paste("End: ", round(thisfun(xend), digits)), fill = "plum1", size = 6, hjust = 0)
print(g)
}
logPlot(xstart = 150, xincrement = 1, int = int, b1 = b1, ylog = TRUE, xmin = 148, xmax = 152)
logPlot <- function(xstart = 0, xincrement = 1, int = 0, b1 = 1, xlog = FALSE,
ylog = TRUE, xmin, xmax, ymin = NULL, ymax = NULL, digits = 2) {
library(scales)
if(ylog == TRUE & xlog == FALSE) {
thisfun <- function(x) { exp(int + b1*x) }
title <- "Logged Outcome, Non-Logged X"
xend <- xstart + xincrement
}
else if(ylog == FALSE & xlog == FALSE) {
thisfun <- function(x) { int + b1*x }
title <- "Non-Logged Outcome & Non-Logged X"
xend <- xstart + xincrement
}
else if(ylog == TRUE & xlog == TRUE) {
thisfun <- function(x) exp(int + b1*log(x))
title <- "Logged Outcome, Logged X"
xend <- xstart*xincrement
}
else if(ylog == FALSE & xlog == TRUE) {
thisfun <- function(x)  int + b1*log(x)
title <- "Non-Logged Outcome & Logged X"
xend <- xstart*xincrement
}
if(is.null(ymin) & is.null(ymax)) ylims <- c(NA, NA)
else if(is.null(ymin) & !is.null(ymax)) ylims <- c(NA, ymax)
else if(!is.null(ymin) & is.null(ymax)) ylims <- c(ymin, NA)
else ylims <- c(ymin, ymax)
g <- ggplot2::ggplot(data = data.frame(x = c(xmin, xmax)), ggplot2::aes(x = x)) +
ggplot2::stat_function(fun = thisfun, size = 2) +
ggplot2::theme_minimal() + ggplot2::xlab("X") + ggplot2::ylab(title) +
ggplot2::ggtitle(title) +
ggplot2::scale_y_continuous(limits = ylims, breaks = scales::pretty_breaks(n = 10)) +
ggplot2::scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
ggplot2::geom_hline(yintercept = thisfun(xstart), linetype = "dotted") +
ggplot2::geom_hline(yintercept = thisfun(xend), linetype = "dotted") +
ggplot2::geom_vline(xintercept = xstart, linetype = "dotted") +
ggplot2::geom_vline(xintercept = xend, linetype = "dotted") +
ggplot2::annotate(geom = "label", xmin, thisfun(xstart), label = paste("Start: ",round(thisfun(xstart), digits)), fill = "plum1", size = 6, hjust = 0) +
ggplot2::annotate(geom = "label", xmin, thisfun(xend), label = paste("End: ", round(thisfun(xend), digits)), fill = "plum1", size = 6, hjust = 0)
print(g)
}
library(carData)
m <- lm(data = USArrests, log(Rape) ~ Assault)
texreg::screenreg(m, digits = 3)
int <- m$coefficients["(Intercept)"]
b1 <- m$coefficients["Assault"]
logPlot(xstart = 150, xincrement = 1, int = int, b1 = b1, ylog = TRUE, xmin = 148, xmax = 152)
logPlot(xstart = 150, xincrement = 1, int = int, b1 = b1, ylog = FALSE, xmin = 148, xmax = 152)
logPlot(xstart = 150, xincrement = 1, int = int, b1 = b1, ylog = TRUE, xmin = 148, xmax = 152)
logPlot(xstart = 148, xincrement = 1, int = int, b1 = b1, ylog = TRUE, xmin = 148, xmax = 152)
logPlot(xstart = 150, xincrement = 1, int = int, b1 = b1, ylog = TRUE, xmin = 148, xmax = 152)
logPlot(xstart = 148, xincrement = 1, int = int, b1 = b1, ylog = TRUE, xmin = 0, xmax = 500)
logPlot(xstart = 148, xincrement = 100, int = int, b1 = b1, ylog = TRUE, xmin = 0, xmax = 500)
logPlot <- function(xstart = 0, xincrement = 1, int = 0, b1 = 1, xlog = FALSE,
ylog = TRUE, xmin, xmax, ymin = NULL, ymax = NULL, digits = 2) {
if(ylog == TRUE & xlog == FALSE) {
thisfun <- function(x) { exp(int + b1*x) }
title <- "Logged Outcome, Non-Logged X"
xend <- xstart + xincrement
}
else if(ylog == FALSE & xlog == FALSE) {
thisfun <- function(x) { int + b1*x }
title <- "Non-Logged Outcome & Non-Logged X"
xend <- xstart + xincrement
}
else if(ylog == TRUE & xlog == TRUE) {
thisfun <- function(x) exp(int + b1*log(x))
title <- "Logged Outcome, Logged X"
xend <- xstart*xincrement
}
else if(ylog == FALSE & xlog == TRUE) {
thisfun <- function(x)  int + b1*log(x)
title <- "Non-Logged Outcome & Logged X"
xend <- xstart*xincrement
}
if(is.null(ymin) & is.null(ymax)) ylims <- c(NA, NA)
else if(is.null(ymin) & !is.null(ymax)) ylims <- c(NA, ymax)
else if(!is.null(ymin) & is.null(ymax)) ylims <- c(ymin, NA)
else ylims <- c(ymin, ymax)
g <- ggplot2::ggplot(data = data.frame(x = c(xmin, xmax)), ggplot2::aes(x = x)) +
ggplot2::stat_function(fun = thisfun, size = 2) +
ggplot2::theme_minimal() + ggplot2::xlab("X") + ggplot2::ylab("Y is on its natural scale") +
ggplot2::ggtitle(title) +
ggplot2::scale_y_continuous(limits = ylims, breaks = scales::pretty_breaks(n = 10)) +
ggplot2::scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) +
ggplot2::geom_hline(yintercept = thisfun(xstart), linetype = "dotted") +
ggplot2::geom_hline(yintercept = thisfun(xend), linetype = "dotted") +
ggplot2::geom_vline(xintercept = xstart, linetype = "dotted") +
ggplot2::geom_vline(xintercept = xend, linetype = "dotted") +
ggplot2::annotate(geom = "label", xmin, thisfun(xstart), label = paste("Start: ",round(thisfun(xstart), digits)), fill = "plum1", size = 6, hjust = 0) +
ggplot2::annotate(geom = "label", xmin, thisfun(xend), label = paste("End: ", round(thisfun(xend), digits)), fill = "plum1", size = 6, hjust = 0)
print(g)
}
logPlot(xstart = 150, xincrement = 1, int = int, b1 = b1, ylog = TRUE, xmin = 148, xmax = 152)
logPlot(xstart = 148, xincrement = 1, int = int, b1 = b1, ylog = TRUE, xmin = 148, xmax = 152)
logPlot(xstart = 148, xincrement = 100, int = int, b1 = b1, ylog = TRUE, xmin = 0, xmax = 500)
logPlot(xstart = 148, xincrement = 100, int = int, b1 = b1, ylog = TRUE, xmin = 0, xmax = 300)
logPlot(xstart = 148, xincrement = 100, int = int, b1 = b1, ylog = TRUE, xmin = 0, xmax = 400)
library(soc429Code)
standardizedExample429 <- function(scale = FALSE) {
set.seed(12345)
x <- rnorm(100, 100, 15)
e.bigsd <- rnorm(100, 0, 75)
e.littlesd <- rnorm(100, 0, 2.5)
y.big <- 10*x + e.bigsd
y.little <- x + e.littlesd
if(scale == TRUE) {
y.big <- scale(y.big)
y.little <- scale(y.little)
x <- scale(x)
}
df <- data.frame(x, y.big, y.little)
m.big <- lm(data = df, y.big ~ x)
m.little <- lm(data = df, y.little ~ x)
return(list(m.big = m.big, m.little = m.little, x = x, y.big = y.big, y.little = y.little))
}
standardizedExample429()
library(soc429Code)
?mtcars
#' simplePlot
#'
#' Generate plots for a continuous/quantitative univariate variable using the ggplot2 package
#' @param data The data frame that the variable is in
#' @param xcol The variable of interest, entered as a string
#' @param fill The fill color of the plots, entered as a string
#' @param color The outline color of the plots, entered as a string
#' @param bins The number of bins for the plots, entered as a numeric value
#' @param H Boolean operator to create histogram, default is FALSE
#' @param D Boolean operator to create density plot, default is FALSE
#' @param B Boolean operator to create boxplot, default is FALSE
#' @param P Boolean operator to create freqpoly plot, default is FALSE
#' simplePlot(mtcars, "wt")
#' simplePlot(mtcars, "wt", H = FALSE, B = FALSE, C = FALSE, color = "purple", fill = "pink")
#' @return The requested plots in ggplot2 format
#' @export
simplePlot <- function(data, xcol, fill = "white", color = "black", bins = 5,
H = TRUE,
D = TRUE,
B = TRUE,
P = TRUE) {
# Check for ggplot2
if (!requireNamespace("ggplot2", quietly = TRUE)) {
stop(
"Package \"ggplot2\" must be installed to use this function.",
call. = FALSE
)
}
# Histogram
if (H == TRUE) {
plot1 <- ggplot2::ggplot(data = data,
ggplot2::aes_string(x = xcol)) +
ggplot2::geom_histogram(fill = fill,
color = color,
bins = bins)
print(plot1)
}
# Density
if (D == TRUE) {
plot2 <- ggplot2::ggplot(data = data,
ggplot2::aes_string(x = xcol)) +
ggplot2::geom_density(fill = fill,
color = color)
print(plot2)
}
# Freqpoly
if (P == TRUE) {
plot3 <- ggplot2::ggplot(data = data,
ggplot2::aes_string(x = xcol)) +
ggplot2::geom_freqpoly(color = fill,
bins = bins)
print(plot3)
}
# Boxplot
if (B == TRUE) {
plot4 <- ggplot2::ggplot(data = data,
ggplot2::aes_string(x = 0, y = xcol)) +
ggplot2::geom_boxplot(fill = fill,
color = color) +
ggplot2::xlab(" ") +
ggplot2::ylab(xcol)
print(plot4)
}
simplePlot(mtcars, "wt")
library(soc429Code)
example(simplePlot)
example(simplePlot())
help(simplePlot())
help(simplePlot)
example(simplePlot)
library(soc429Code)
example(simplePlot)
library(soc429Code)
example(simplePlot)
simplePlot(mtcars, "wt")
simplePlot(mtcars, "wt", H = FALSE, B = FALSE, P = FALSE, color = "purple", fill = "pink")
library(soc429Code)
